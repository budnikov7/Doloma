 
//обработка регламентого задания ОбработкаОчередиОбменаСообщений
//Процедура ОбработкаОчередиОбменаСообщений() Экспорт 
//	
//	СформироватьСообщение();

//КонецПроцедуры   

Функция ОтправитьДанные(ИмяДанных) Экспорт
	
	ТелоЗапроса = "";
	
	Если ИмяДанных = "Предприятия" Тогда
		ТелоЗапроса = СформироватьТелоЗапросаПредприятия();
	ИначеЕсли ИмяДанных = "Хозяйства" Тогда	 
		ТелоЗапроса = СформироватьТелоЗапросаХозяйства();
	ИначеЕсли ИмяДанных = "Фермы" Тогда	
		ТелоЗапроса = СформироватьТелоЗапросаФермы();
	ИначеЕсли ИмяДанных = "Кормораздатчики" Тогда	
		ТелоЗапроса = СформироватьТелоЗапросаКормораздатчики();
	ИначеЕсли ИмяДанных = "ГруппыЖивотных" Тогда	
		ТелоЗапроса = СформироватьТелоЗапросаГруппыЖивотных();
	ИначеЕсли ИмяДанных = "Корма" Тогда	
		ТелоЗапроса = СформироватьТелоЗапросаКорма();
	ИначеЕсли ИмяДанных = "Трактористы" Тогда	
		ТелоЗапроса = СформироватьТелоЗапросаТрактористы(); 
	ИначеЕсли ИмяДанных = "Кормораздатчики" Тогда	
		ТелоЗапроса = СформироватьТелоЗапросаКормораздатчики(); 
	КонецЕсли;
	
	РезультатОбмена = ОтправитьСообщение(ТелоЗапроса); 
	
	Возврат РезультатОбмена;

КонецФункции

Функция ОтправитьСообщение(ТелоЗапроса)

	СтруктураАвторизации = СтруктураАутентификации(Справочники.НастройкиПодключенияКВнешнимСистемам.Сикора);	

    HTTPЗапрос = Новый HTTPЗапрос(СтруктураАвторизации.ИмяСервиса + СтруктураАвторизации.ИдентификаторКлиента); 
	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");

	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	РезультатЗапроса = ВыполнитьЗапрос(HTTPЗапрос, СтруктураАвторизации.АдресВебСервера);
	
	Возврат РезультатЗапроса;

	//	//записываем факт обращения в журнал обмена
	//	УстановитьПривилегированныйРежим(Истина);
	//	ЗаписьЖурнала = РегистрыСведений.ЖурналОбменаДанными.СоздатьМенеджерЗаписи();
	//	ЗаписьЖурнала.Документ = НайденныйДокумент;
	//	ЗаписьЖурнала.ДатаСобытия = ТекущаяДата();
	//	ЗаписьЖурнала.Ответ = ?(Не ЗначениеЗаполнено(ТекстСообщения), "Все прошло успешно", ТекстСообщения);
	//	ЗаписьЖурнала.Записать(Истина);
	//	УстановитьПривилегированныйРежим(Ложь);
	//	//Конец записи

	//	Если ПустаяСтрока(ТекстСообщения) Тогда
	//		//успешный обмен, удаляем из очереди
	//		МенеджерЗаписи = РегистрыСведений.ОчередьОбменаСообщенийДляСклада.СоздатьМенеджерЗаписи();
	//		МенеджерЗаписи.Документ = НайденныйДокумент;
	//		МенеджерЗаписи.Операция = Операция;
	//		МенеджерЗаписи.Удалить();
	//	Иначе
	//		МенеджерЗаписи = РегистрыСведений.ОчередьОбменаСообщенийДляСклада.СоздатьМенеджерЗаписи();
	//		МенеджерЗаписи.Документ = НайденныйДокумент;
	//		МенеджерЗаписи.Операция = Операция;
	//		МенеджерЗаписи.Ответ = ТекстСообщения;
	//		МенеджерЗаписи.Записать(Истина);
	//	КонецЕсли;

КонецФункции

// Возвращает структуру аутентификации для синхронизации.
//
//
// Возвращаемое значение:
//  Структура - содержит свойства:
//    Пользователь - строка - пользователь для синхронизации;
//    АдресЦентральнойБазы - строка - адрес публикации web-сервиса для синхронизации;
//    ПарольДляОбмена - строка - параметр сеанса "Пароль для синхронизации";
//
Функция СтруктураАутентификации(НастройкаСинхронизации) Экспорт

	СтруктураАутентификации = Новый Структура;

	РеквизитыСинхронизации = "АдресВебСервера, Логин, Пароль, ИмяСервиса, Порт, ИдентификаторКлиента, ИспользуетсяЗащищенноеСоединение";
	ЗначениеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаСинхронизации, РеквизитыСинхронизации);
	СтруктураАутентификации.Вставить("Пользователь",ЗначениеРеквизитов.Логин);
	СтруктураАутентификации.Вставить("АдресВебСервера",ЗначениеРеквизитов.АдресВебСервера);
	СтруктураАутентификации.Вставить("ПарольДляОбмена",ЗначениеРеквизитов.Пароль);
	СтруктураАутентификации.Вставить("ИмяСервиса",ЗначениеРеквизитов.ИмяСервиса);
	
	Если ЗначениеРеквизитов.ИспользуетсяЗащищенноеСоединение Тогда 
		СтруктураАутентификации.ЗащищенноеСоединение=Истина;
	КонецЕсли;
	СтруктураАутентификации.Вставить("ИдентификаторКлиента",ЗначениеРеквизитов.ИдентификаторКлиента);
	СтруктураАутентификации.Вставить("Порт",ЗначениеРеквизитов.Порт);

	Возврат СтруктураАутентификации;

КонецФункции  

Функция ВыполнитьЗапрос(Знач HTTPЗапрос, Знач ИмяХоста)
	
	ЗащищенноеСоединение = Неопределено;
	
	Попытка
		Соединение = Новый HTTPСоединение(ИмяХоста, , , , , 60,,);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(СтрШаблон("Не удалось установить соединение с сервером %1 по причине:
			|%2'", ИмяХоста, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ВызватьИсключение;
	КонецПопытки;
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния", "");
	Результат.Вставить("ОтветСервера", "");
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Запрос ""%1"" не выполнен. Код состояния: %2.'"),
			HTTPЗапрос.АдресРесурса,
			HTTPОтвет.КодСостояния) + Символы.ПС + HTTPОтвет.ПолучитьТелоКакСтроку();
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецЕсли;
	
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	Результат.ОтветСервера = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьТелоЗапросаПредприятия()
	
	ТелоЗапроса = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Предприятия.Ссылка КАК Ссылка,
	|	Предприятия.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Предприятия КАК Предприятия
	|ГДЕ
	|	Предприятия.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТелоЗапроса;	
	КонецЕсли;
	Выборка = Результат.Выбрать(); 
	
	Структура = Новый Структура; 
	Структура.Вставить("target","companies"); 
	Данные = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("c_uuid", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("c_name", Выборка.Наименование); 
		СтруктураДанных.Вставить("c_status", Истина); 
		СтруктураДанных.Вставить("c_mail", ""); 
		СтруктураДанных.Вставить("c_inn", ""); 
		СтруктураДанных.Вставить("c_address", ""); 
		СтруктураДанных.Вставить("c_description", ""); 
		Данные.Добавить(СтруктураДанных);
			
	КонецЦикла;  
	
	Структура.Вставить("data", Данные);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура); 
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат  ТелоЗапроса;
		
КонецФункции

Функция СформироватьТелоЗапросаХозяйства()
	
	ТелоЗапроса = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Хозяйства.Ссылка КАК Ссылка,
	|	Хозяйства.Наименование КАК Наименование,
	|	Хозяйства.Предприятие КАК Предприятие,
	|	Хозяйства.Предприятие.Наименование КАК ПредприятиеНаименование
	|ИЗ
	|	Справочник.Хозяйства КАК Хозяйства
	|ГДЕ
	|	Хозяйства.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТелоЗапроса;	
	КонецЕсли;
	Выборка = Результат.Выбрать(); 
	
	Структура = Новый Структура; 
	Структура.Вставить("target","husbandries"); 
	Данные = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("c_uuid", Строка(Выборка.Предприятие.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("c_name", Выборка.ПредприятиеНаименование);    
		СтруктураДанных.Вставить("h_uuid", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("h_name", Выборка.Наименование); 
		СтруктураДанных.Вставить("h_status", Истина); 
		Данные.Добавить(СтруктураДанных);
			
	КонецЦикла;  
	
	Структура.Вставить("data", Данные);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура); 
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат  ТелоЗапроса;
		
КонецФункции

Функция СформироватьТелоЗапросаФермы()
	
	ТелоЗапроса = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Фермы.Ссылка КАК Ссылка,
	|	Фермы.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Фермы КАК Фермы
	|ГДЕ
	|	Фермы.ПометкаУдаления = ЛОЖЬ
	|	И Фермы.Предопределенный = ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТелоЗапроса;	
	КонецЕсли;
	Выборка = Результат.Выбрать(); 
	
	Структура = Новый Структура; 
	Структура.Вставить("target","farms"); 
	Данные = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура();  
		СтруктураДанных.Вставить("f_uuid", Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("f_name", Выборка.Наименование); 
		СтруктураДанных.Вставить("f_status", Истина); 
		Данные.Добавить(СтруктураДанных);
			
	КонецЦикла;  
	
	Структура.Вставить("data", Данные);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура); 
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат  ТелоЗапроса;
		
КонецФункции

Функция СформироватьТелоЗапросаКорма()
	
	ТелоЗапроса = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаПитательностиКормовСрезПоследних.Номенклатура КАК Номенклатура,
	|	ТаблицаПитательностиКормовСрезПоследних.Номенклатура.Наименование КАК НоменклатураНаименование
	|ИЗ
	|	РегистрСведений.ТаблицаПитательностиКормов.СрезПоследних(, ) КАК ТаблицаПитательностиКормовСрезПоследних
	|ГДЕ
	|	ТаблицаПитательностиКормовСрезПоследних.Номенклатура.ПометкаУдаления = ЛОЖЬ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Структура = Новый Структура; 
	Структура.Вставить("target","ingredients"); 
	Данные = Новый Массив;

	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура();
		СтруктураДанных.Вставить("i_uuid", Строка(Выборка.Номенклатура.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("i_name", Выборка.НоменклатураНаименование); 
		Данные.Добавить(СтруктураДанных);  
		
	КонецЦикла;  
	
	Структура.Вставить("data", Данные);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура); 
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат  ТелоЗапроса;
		
КонецФункции

Функция СформироватьТелоЗапросаТрактористы()
	
	ТелоЗапроса = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Трактористы.Ссылка КАК Ссылка,
	|	Трактористы.Владелец КАК Ферма,
	|	Трактористы.Имя КАК Имя,
	|	Трактористы.Фамилия КАК Фамилия,
	|	Трактористы.Логин КАК Логин,
	|	Трактористы.Пароль КАК Пароль
	|ИЗ
	|	Справочник.Трактористы КАК Трактористы
	|ГДЕ
	|	Трактористы.ПометкаУдаления = ЛОЖЬ
	|	И Трактористы.Владелец <> ЗНАЧЕНИЕ(Справочник.Фермы.ПустаяСсылка)");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТелоЗапроса;	
	КонецЕсли;
	Выборка = Результат.Выбрать(); 
	
	Структура = Новый Структура; 
	Структура.Вставить("target","executers"); 
	Данные = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура();  
		СтруктураДанных.Вставить("us_f_uuid", 		Строка(Выборка.Ферма.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("us_uuid", 		Строка(Выборка.Ссылка.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("us_first_name", 	Выборка.Имя); 
		СтруктураДанных.Вставить("us_second_name", 	Выборка.Фамилия); 
		СтруктураДанных.Вставить("us_login", 		Выборка.Логин);   
		СтруктураДанных.Вставить("us_password", 	Выборка.Пароль); 
		СтруктураДанных.Вставить("us_status", 		Истина); 
		Данные.Добавить(СтруктураДанных);
			
	КонецЦикла;  
	
	Структура.Вставить("data", Данные);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура); 
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат  ТелоЗапроса;
		
КонецФункции

Функция СформироватьТелоЗапросаКормораздатчики()
	
	ТелоЗапроса = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Кормораздатчики.Ссылка КАК Ссылка,
	|	Кормораздатчики.Наименование КАК Наименование,
	|	Кормораздатчики.Владелец КАК Ферма,
	|	Кормораздатчики.МаксимальнаяЗагрузка КАК МаксимальнаяЗагрузка,
	|	Кормораздатчики.КлючТерминала КАК КлючТерминала,
	|	Кормораздатчики.ТипУстройства КАК ТипУстройства
	|ИЗ
	|	Справочник.Кормораздатчики КАК Кормораздатчики
	|ГДЕ
	|	Кормораздатчики.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТелоЗапроса;	
	КонецЕсли;
	Выборка = Результат.Выбрать(); 
	
	Структура = Новый Структура; 
	Структура.Вставить("target","devices"); 
	Данные = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура();  
		СтруктураДанных.Вставить("f_uuid", 			Строка(Выборка.Ферма.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("d_type", 			XMLСтрока(Выборка.ТипУстройства)); 
		СтруктураДанных.Вставить("d_uuid", 			Выборка.КлючТерминала);    
		СтруктураДанных.Вставить("d_max_capacity", 	Формат(Выборка.МаксимальнаяЗагрузка, "ЧГ=0")); 
		СтруктураДанных.Вставить("d_status", 		Истина); 
		СтруктураДанных.Вставить("d_description", 	Выборка.Наименование);
		
		Данные.Добавить(СтруктураДанных);
			
	КонецЦикла;  
	
	Структура.Вставить("data", Данные);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура); 
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат  ТелоЗапроса;
		
КонецФункции




Функция СформироватьТелоЗапросаГруппыЖивотных()
	
	ТелоЗапроса = "";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыЖивотных.Ссылка КАК Ссылка,
	|	ГруппыЖивотных.Наименование КАК Наименование,
	|	Фермы.Ссылка КАК Ферма
	|ИЗ
	|	Справочник.ГруппыЖивотных КАК ГруппыЖивотных,
	|	Справочник.Фермы КАК Фермы
	|ГДЕ
	|	ГруппыЖивотных.ПометкаУдаления = ЛОЖЬ
	|	И Фермы.ПометкаУдаления = ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ТелоЗапроса;	
	КонецЕсли;
	Выборка = Результат.Выбрать(); 
	
	Структура = Новый Структура; 
	Структура.Вставить("target","animals"); 
	Данные = Новый Массив;
	Сч = 1;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураДанных = Новый Структура(); 
		СтруктураДанных.Вставить("id", Сч);
		СтруктураДанных.Вставить("f_uuid", Строка(Выборка.Ферма.УникальныйИдентификатор()));
		СтруктураДанных.Вставить("g_uuid", Строка(Выборка.Ссылка.УникальныйИдентификатор())); 
		СтруктураДанных.Вставить("g_name", Строка(Выборка.Наименование));
		СтруктураДанных.Вставить("g_description", "");
		
		Данные.Добавить(СтруктураДанных);
		Сч = Сч + 1;
		
	КонецЦикла;  
	
	Структура.Вставить("data", Данные);
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура); 
	ТелоЗапроса = Запись.Закрыть();
	
	Возврат  ТелоЗапроса;
		
КонецФункции


Процедура ЗаписатьОшибкуВЖурналРегистрации(Комментарий)
	
	ЗаписьЖурналаРегистрации("Обмен данными",УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
	
КонецПроцедуры  


