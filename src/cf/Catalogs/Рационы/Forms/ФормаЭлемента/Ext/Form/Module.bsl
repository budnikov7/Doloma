  
#Область ОбработчикиСобытийФормы   

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	УстановитьОтборТаблицыПоказателей(); 
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	УстановитьОтборТаблицыПоказателей();
	ОбновитьПодвал();
	
КонецПроцедуры  

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьОтборТаблицыПоказателей();
КонецПроцедуры

&НаКлиенте
Процедура КормаВесПриИзменении(Элемент)
	РассчитатьСуммуКорма();	
КонецПроцедуры

&НаКлиенте
Процедура КормаЦенаПриИзменении(Элемент)
	РассчитатьСуммуКорма();	
КонецПроцедуры

&НаКлиенте
Процедура КормаНоменклатураПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.Корма.ТекущиеДанные;
	Номенклатура = ТекущиеДанные.Номенклатура;
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТекущиеДанные.Цена = ПолучитьЦенуНоменклатуры(Номенклатура); 
		ТекущиеДанные.ВидКорма = ЗначениеРеквизитаСсылки(Номенклатура, "ВидКорма");
	Иначе
		ТекущиеДанные.Цена = 0;
		ТекущиеДанные.ВидКорма = ПредопределенноеЗначение("Перечисление.ВидыКормов.ПустаяСсылка");
	КонецЕсли;  
	РассчитатьСуммуКорма();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаЖивотныхПриИзменении(Элемент) 
	
	ЗаполнитьПоказателиНаСервере();  
	УстановитьОтборТаблицыПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияПоказателейПриИзменении(Элемент)
	
	УстановитьОтборТаблицыПоказателей(); 
	
КонецПроцедуры  

&НаКлиенте
Процедура ПоказателиРационаСодержаниеОткрытие(Элемент, СтандартнаяОбработка) 

	СтандартнаяОбработка = Ложь;
	Расшифровать(Неопределено);	

КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Рассчитать(Команда) 
	
	МассивНезаполненныхКормов = Новый Массив;
	ПроверитьЗаполнениеКормов(МассивНезаполненныхКормов);
	Если МассивНезаполненныхКормов.Количество() > 0 Тогда 
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("В номенклатуре %1 не заполнен вид корма. Расчет невозможен.", СтрСоединить(МассивНезаполненныхКормов)) ;
		Сообщение.Сообщить();	
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = ""; 
	РассчитатьПоказателиПитательности(ТекстОшибки); 
	Если ТекстОшибки <> "" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();	
	КонецЕсли;
	
	ОбновитьПодвал();
	УстановитьОтборТаблицыПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКалькулятор(Команда)
	
	ТекДанные = Элементы.Корма.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("Номенклатура", ТекДанные.Номенклатура);
	ОткрытьФорму("Справочник.Рационы.Форма.ФормаКалькулятора", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЦены(Команда)
	ПерезаполнитьЦеныНаСервере();
КонецПроцедуры
	
#КонецОбласти   


#Область СлужебныеПроцедурыИФункции 

&НаСервере
Процедура ПерезаполнитьЦеныНаСервере()
	
	МассивНоменклатуры = Объект.Корма.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыНаСкладахОстатки.СуммаОстаток КАК Сумма,
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура В (&Номенклатура)) КАК ТоварыНаСкладахОстатки";
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
    	СтрОтбора = Новый Структура("Номенклатура", Выборка.Номенклатура);
		НайденныеСтроки = Объект.Корма.НайтиСтроки(СтрОтбора);
		Для каждого Строчка Из НайденныеСтроки Цикл
			Если Выборка.Количество = 0 Тогда
				Строчка.Цена = 0;
			Иначе
				Строчка.Цена = Выборка.Сумма / Выборка.Количество;
			КонецЕсли; 
			Строчка.Сумма = Строчка.Цена * Строчка.Вес;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()

	Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("Зоотехник") Тогда
		Элементы.ГруппаПоказатели.Видимость = Ложь;
		Элементы.ФормаРассчитать.Видимость = Ложь;
		
		Элементы.Корма.ИзменятьСоставСтрок = Ложь;
		//ЭтотОбъект.ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеКормов(МассивНезаполненныхКормов)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Наименование КАК Номенклатура
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Номенклатура)
	|	И Номенклатура.ВидКорма = ЗНАЧЕНИЕ(Перечисление.ВидыКормов.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Номенклатура", Объект.Корма.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура"));
	ТЗ = Запрос.Выполнить().Выгрузить();
	МассивНезаполненныхКормов = ТЗ.ВыгрузитьКолонку("Номенклатура");

КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПолучитьЦенуНоменклатуры(Номенклатура)  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК Количество,
	|	ТоварыНаСкладахОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(, Номенклатура = &Номенклатура) КАК ТоварыНаСкладахОстатки";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И Выборка.Количество > 0 Тогда
		Цена = Выборка.Сумма / Выборка.Количество;
	Иначе
		Цена = 0;
	КонецЕсли; 
	
	Возврат Цена;
	
КонецФункции 

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаСсылки(Ссылка, ИмяРеквизита)

	Возврат Ссылка[ИмяРеквизита];	

КонецФункции // ЗначениеРеквизитаНоменклатуры()

&НаКлиенте
Процедура РассчитатьСуммуКорма()
	
	ТекущиеДанные = Элементы.Корма.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Вес;
	КонецЕсли;
	
КонецПроцедуры    

&НаСервере
Процедура ЗаполнитьПоказателиНаСервере()

	Объект.ПоказателиРациона.Очистить();  
	Объект.ДетализацияПоказателей.Очистить();  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормативныеПоказателиРационов.ПоказательРациона КАК ПоказательРациона,
	|	НормативныеПоказателиРационов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НормативныеПоказателиРационов.Минимум КАК Минимум,
	|	НормативныеПоказателиРационов.Максимум КАК Максимум,
	|	НормативныеПоказателиРационов.ПоказательРациона.Код КАК КодПоказателя
	|ИЗ
	|	РегистрСведений.НормативныеПоказателиРационов КАК НормативныеПоказателиРационов
	|ГДЕ
	|	НормативныеПоказателиРационов.ГруппаЖивотных = &ГруппаЖивотных
	|	И НормативныеПоказателиРационов.ПоказыватьВРационе
	|
	|УПОРЯДОЧИТЬ ПО
	|	НормативныеПоказателиРационов.ПоказательРациона.Код"; 
	Запрос.УстановитьПараметр("ГруппаЖивотных", Объект.ГруппаЖивотных); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НовСтрока = Объект.ПоказателиРациона.Добавить();	
		ЗаполнитьЗначенияСвойств(НовСтрока,Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборТаблицыПоказателей()
                     
	Для каждого Строчка Из Объект.ПоказателиРациона Цикл
		Если ВариантОтображенияПоказателей = 0 Тогда
		    Строчка.Видимость = ЗначениеРеквизитаСсылки(Строчка.ПоказательРациона, "ПереводитьВПроценты") = Ложь
				ИЛИ (Строчка.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.Процент"));
		Иначе	
		    Строчка.Видимость = ЗначениеРеквизитаСсылки(Строчка.ПоказательРациона, "ПереводитьВПроценты") = Ложь
				ИЛИ (Строчка.ЕдиницаИзмерения <> ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.Процент"));
		КонецЕсли;
			
		Строчка.СодержаниеМин = Строчка.Содержание * 1.02;
		Строчка.СодержаниеМакс = Строчка.Содержание * 0.98;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Видимость", Истина);
	Элементы.ПоказателиРациона.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
КонецПроцедуры 

&НаСервере
Процедура РассчитатьПоказателиПитательности(ТекстОшибки)
	
	Объект.ДетализацияПоказателей.Очистить();  
	ВремТЗ = Объект.ПоказателиРациона.Выгрузить();
	ВремТЗ.ЗаполнитьЗначения(0,"Содержание");
	Объект.ПоказателиРациона.Загрузить(ВремТЗ);
	
	ОбщийВес = Объект.Корма.Итог("Вес")*1000;
	Объект.СуммаСВ	 		= 0;  
	Объект.СуммаСВ_ОК 		= 0;  
	Объект.СуммаСВ_МК 		= 0;
	Объект.СуммаСВ_КК 		= 0;
	Объект.СуммаСВ_Прочее 	= 0;
	
	ТаблицаПитательности = ПолучитьТаблицуПитательности(Объект.Корма.Выгрузить(,"Номенклатура,ВидКорма,Вес,Цена"), Объект.Дата); 
	
	ТаблицаПоказателей = Объект.ПоказателиРациона.Выгрузить(,"ПоказательРациона,Содержание");
	ТаблицаПоказателей.Свернуть("ПоказательРациона", "Содержание");
	
	Для Сч = 1 По 2 Цикл
	
		Для каждого СтрПоказатель Из ТаблицаПоказателей Цикл 
			
			ИмяПоказателя = СтрПоказатель.ПоказательРациона.ИмяПредопределенныхДанных;
			Если (Сч = 1 И ИмяПоказателя <> "СухоеВещество") ИЛИ (Сч = 2 И ИмяПоказателя = "СухоеВещество") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяПоказателя = "NDF_ОК" Тогда
				ИмяКолонкиПитательности = "NDF";
			Иначе	
				ИмяКолонкиПитательности = ИмяПоказателя;
			КонецЕсли; 
			
			Если ТаблицаПитательности.Колонки.Найти(ИмяКолонкиПитательности) <> Неопределено Тогда
				
				СуммаПоказателя = 0;
				Для каждого СтрокаПитательности Из ТаблицаПитательности Цикл
					Если СтрокаПитательности[ИмяКолонкиПитательности] <> 0 ИЛИ СтрНайти(ИмяКолонкиПитательности, "ВРубце") Тогда  
						
						Если ИмяПоказателя = "NDF_ОК" И СтрокаПитательности.ВидКорма <> Перечисления.ВидыКормов.ОК Тогда
							Продолжить;
						КонецЕсли;
						
						Если ИмяКолонкиПитательности = "СухоеВещество" Тогда 
							ЗначениеПитательности = СтрокаПитательности[ИмяКолонкиПитательности];
						ИначеЕсли ИмяКолонкиПитательности = "РастворимыйСП" ИЛИ ИмяКолонкиПитательности = "РастворимыйВРубцеПротеин" Тогда
							ЗначениеПитательности = СтрокаПитательности.XP * СтрокаПитательности.РастворимыйСП / 100 * СтрокаПитательности.СухоеВещество / 1000;
						ИначеЕсли ИмяКолонкиПитательности = "НерастворимыйВРубцеПротеин" Тогда
							ЗначениеПитательности = СтрокаПитательности.XP * (100-СтрокаПитательности.РастворимыйСП) / 100 * СтрокаПитательности.СухоеВещество / 1000;
						Иначе	
							ЗначениеПитательности = СтрокаПитательности[ИмяКолонкиПитательности] * СтрокаПитательности.СухоеВещество / 1000;			
						КонецЕсли; 
						
						Если ИмяКолонкиПитательности = "Цена" Тогда
							ТекЗначение = Окр(СтрокаПитательности.Вес * СтрокаПитательности[ИмяКолонкиПитательности], 2);
						Иначе
							ТекЗначение = СтрокаПитательности.Вес * ЗначениеПитательности;
						КонецЕсли;
						СуммаПоказателя 					= СуммаПоказателя + ТекЗначение;
						СтрокаДетализации 					= Объект.ДетализацияПоказателей.Добавить();
						СтрокаДетализации.Номенклатура 		= СтрокаПитательности.Номенклатура;
						СтрокаДетализации.ВидКорма 			= СтрокаПитательности.ВидКорма;
						СтрокаДетализации.ПоказательРациона = СтрПоказатель.ПоказательРациона;
						СтрокаДетализации.Содержание 		= ТекЗначение;
						Если ИмяПоказателя = "СухоеВещество" Тогда                             
							Объект.СуммаСВ = СуммаПоказателя;
							Объект["СуммаСВ_" + СтрокаПитательности.ВидКорма] = Объект["СуммаСВ_" + СтрокаПитательности.ВидКорма] + ТекЗначение;	
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				СтрПоказатель.Содержание = СуммаПоказателя; 
				
			Иначе 
				
				Если Объект.СуммаСВ = Неопределено Тогда
					ТекстОшибки = "Не удалось рассчитать сумму сухого вещества. Дальнейший расчет невозможен.";	
					Возврат;
				КонецЕсли;
				
				Если ИмяПоказателя = "СВВОК" Тогда
			    	СтрПоказатель.Содержание = Объект.СуммаСВ_ОК; 
				ИначеЕсли ИмяПоказателя = "Влажность" Тогда
			    	СтрПоказатель.Содержание = ОбщийВес - Объект.СуммаСВ;
				КонецЕсли; 
				
			КонецЕсли;

		КонецЦикла;		
	
	КонецЦикла;
	
	Для каждого СтрПоказатель Из Объект.ПоказателиРациона Цикл
		
		ИмяПоказателя = СтрПоказатель.ПоказательРациона.ИмяПредопределенныхДанных; 
		
		Если СтрПоказатель.ЕдиницаИзмерения <> Справочники.ЕдиницыИзмерения.Процент Тогда
			
			Если ИмяПоказателя = "NELНаКгСВ" Тогда
				НайденнаяСтрока = ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.NEL, "ПоказательРациона");
				Если НайденнаяСтрока <> Неопределено Тогда 
				    СтрПоказатель.Содержание = 1000 * НайденнаяСтрока.Содержание / Объект.СуммаСВ; 
				КонецЕсли; 
			ИначеЕсли ИмяПоказателя = "DCAD" Тогда
				СодержаниеNa	= ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.Na, "ПоказательРациона").Содержание * 434;
				СодержаниеK		= ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.K, "ПоказательРациона").Содержание * 256;
				СодержаниеCl	= ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.Cl, "ПоказательРациона").Содержание * 282;
				СодержаниеS		= ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.S, "ПоказательРациона").Содержание * 624;  
				СтрПоказатель.Содержание = 100 * (СодержаниеNa + СодержаниеK - СодержаниеCl - СодержаниеS) / 
												 (Объект.СуммаСВ - Объект.СуммаСВ_МК); 
			ИначеЕсли ИмяПоказателя = "Ca_P" Тогда
				СодержаниеCa	= ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.Ca, "ПоказательРациона").Содержание;
				СодержаниеP		= ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.P, "ПоказательРациона").Содержание;
				СтрПоказатель.Содержание = СодержаниеCa / СодержаниеP; 
            Иначе
				НайденнаяСтрока = ТаблицаПоказателей.Найти(СтрПоказатель.ПоказательРациона, "ПоказательРациона");
				Если НайденнаяСтрока <> Неопределено Тогда 
				    СтрПоказатель.Содержание = НайденнаяСтрока.Содержание; 
				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли СтрПоказатель.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.Процент Тогда
			
			Если ИмяПоказателя = "СВВОК" Тогда
				СтрПоказатель.Содержание = 100 * Объект.СуммаСВ_ОК / Объект.СуммаСВ; 
			ИначеЕсли ИмяПоказателя = "Влажность" Тогда
				СтрПоказатель.Содержание = 100 - 100 * Объект.СуммаСВ / ОбщийВес; 
			ИначеЕсли ИмяПоказателя = "РастворимыйСП" Тогда
				НайденнаяСтрокаРастворимыйСП = ТаблицаПоказателей.Найти(СтрПоказатель.ПоказательРациона, "ПоказательРациона");
				НайденнаяСтрокаСП = ТаблицаПоказателей.Найти(Справочники.ПоказателиРационов.XP, "ПоказательРациона");
				Если НайденнаяСтрокаРастворимыйСП <> Неопределено И НайденнаяСтрокаСП <> Неопределено Тогда
					СтрПоказатель.Содержание = 100 * НайденнаяСтрокаРастворимыйСП.Содержание / НайденнаяСтрокаСП.Содержание;
				КонецЕсли; 
			Иначе
				НайденнаяСтрока = ТаблицаПоказателей.Найти(СтрПоказатель.ПоказательРациона, "ПоказательРациона");
				Если НайденнаяСтрока <> Неопределено Тогда
					СтрПоказатель.Содержание = 100 * НайденнаяСтрока.Содержание / Объект.СуммаСВ;
				КонецЕсли;
			КонецЕсли;	
		
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьТаблицуКормов(ТаблицаПитательности, Объект.СуммаСВ);
	
КонецПроцедуры // ЗаполнитьПоказателиНоменклатуры()

&НаСервереБезКонтекста
Функция ПолучитьТаблицуПитательности(ТаблицаКормов, Дата)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаКормов.Номенклатура КАК Номенклатура,
	|	ТаблицаКормов.ВидКорма КАК ВидКорма,
	|	ТаблицаКормов.Цена КАК Цена,
	|	ТаблицаКормов.Вес КАК Вес
	|ПОМЕСТИТЬ вт_Корма
	|ИЗ
	|	&ТаблицаКормов КАК ТаблицаКормов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПитательности.СухоеВещество КАК СухоеВещество,
	|	ТаблицаПитательности.ОЭ КАК ОЭ,
	|	ТаблицаПитательности.XP КАК XP,
	|	ТаблицаПитательности.nXp КАК nXp,
	|	ТаблицаПитательности.RNB КАК RNB,
	|	ТаблицаПитательности.СК КАК СК,
	|	ТаблицаПитательности.СЖ КАК СЖ,
	|	ТаблицаПитательности.СЗ КАК СЗ,
	|	ТаблицаПитательности.Крахмал КАК Крахмал,
	|	ТаблицаПитательности.ТранзитныйКрахмал КАК ТранзитныйКрахмал,
	|	ТаблицаПитательности.Сахар КАК Сахар,
	|	ТаблицаПитательности.NDF КАК NDF,
	|	ТаблицаПитательности.ADF КАК ADF,
	|	ТаблицаПитательности.NEL КАК NEL,
	|	ТаблицаПитательности.Ca КАК Ca,
	|	ТаблицаПитательности.Na КАК Na,
	|	ТаблицаПитательности.Mg КАК Mg,
	|	ТаблицаПитательности.K КАК K,
	|	ТаблицаПитательности.Cl КАК Cl,
	|	ТаблицаПитательности.S КАК S,
	|	ТаблицаПитательности.P КАК P,
	|	ТаблицаПитательности.Структ КАК Структ,
	|	ТаблицаПитательности.СтрКл КАК СтрКл,
	|	ТаблицаПитательности.РастворимыйСП КАК РастворимыйСП,
	|	ТаблицаПитательности.РастворимыйВРубцеПротеин КАК РастворимыйВРубцеПротеин,
	|	ТаблицаПитательности.НерастворимыйВРубцеПротеин КАК НерастворимыйВРубцеПротеин,
	|	ТаблицаПитательности.UDP КАК UDP,
	|	ТаблицаПитательности.ADL КАК ADL,
	|	вт_Корма.Вес КАК Вес,
	|	вт_Корма.ВидКорма КАК ВидКорма,
	|	вт_Корма.Цена КАК Цена,
	|	вт_Корма.Номенклатура КАК Номенклатура
	|ИЗ
	|	вт_Корма КАК вт_Корма
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТаблицаПитательностиКормов.СрезПоследних(&Дата, ) КАК ТаблицаПитательности
	|		ПО вт_Корма.Номенклатура = ТаблицаПитательности.Номенклатура";
	Запрос.УстановитьПараметр("ТаблицаКормов", ТаблицаКормов);
	Запрос.УстановитьПараметр("Дата", Дата);
	ТаблицаПитательности = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаПитательности;
	
КонецФункции 

&НаСервере
Процедура РассчитатьТаблицуКормов(ТаблицаПитательности, ОбщийВесСВ)

	Для каждого Строчка Из Объект.Корма Цикл
		НайденнаяСтрока = ТаблицаПитательности.Найти(Строчка.Номенклатура, "Номенклатура");	
		Если НайденнаяСтрока <> Неопределено Тогда
			Процент 			= НайденнаяСтрока.СухоеВещество / 1000;
			Строчка.Процент 	= Процент; 
			ДоляСВ 				= НайденнаяСтрока.Вес * Процент; 
			Строчка.ДоляСВ 		= ДоляСВ; 
			Строчка.ПроцентСВ 	= 100000 * ДоляСВ / ОбщийВесСВ; 
		КонецЕсли;	
	КонецЦикла;	

КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ТекущиеДанные = Элементы.ПоказателиРациона.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	ТекущаяЕдиница = ТекущиеДанные.ЕдиницаИзмерения;
	РежимПроцента = (ТекущаяЕдиница = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.Процент"));
	ПоказательРациона = ТекущиеДанные.ПоказательРациона;
	
	Если ПоказательРациона = ПредопределенноеЗначение("Справочник.ПоказателиРационов.СВВОК") Тогда
		СтруктураОтбора = Новый Структура("ПоказательРациона, ВидКорма", ПредопределенноеЗначение("Справочник.ПоказателиРационов.СухоеВещество"), ПредопределенноеЗначение("Перечисление.ВидыКормов.ОК"));
	ИначеЕсли ПоказательРациона = ПредопределенноеЗначение("Справочник.ПоказателиРационов.NELНаКгСВ") Тогда
		СтруктураОтбора = Новый Структура("ПоказательРациона", ПредопределенноеЗначение("Справочник.ПоказателиРационов.NEL"));
	Иначе	
		СтруктураОтбора = Новый Структура("ПоказательРациона", ПоказательРациона);
	КонецЕсли;
	
	НайденныеСтроки = Объект.ДетализацияПоказателей.НайтиСтроки(СтруктураОтбора); 
	
	СуммаПоказателя = 0;
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		СуммаПоказателя = СуммаПоказателя + НайденнаяСтрока.Содержание;
	КонецЦикла; 
	
	ФормаРасшифровки = ПолучитьФорму("Справочник.Рационы.Форма.ФормаРасшифровки");
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
		НоваяСтрока 				= ФормаРасшифровки.ТаблицаРасшифровки.Добавить();
		НоваяСтрока.Номенклатура 	= НайденнаяСтрока.Номенклатура;
		НоваяСтрока.Процент			= 100 * НайденнаяСтрока.Содержание / СуммаПоказателя;
		НоваяСтрока.Содержание		= НайденнаяСтрока.Содержание;
	КонецЦикла;
	ФормаРасшифровки.ТаблицаРасшифровки.Сортировать("Содержание Убыв");
	ФормаРасшифровки.Элементы.ТаблицаРасшифровкиПроцент.ТекстПодвала = "100,00";
	ФормаРасшифровки.Элементы.ТаблицаРасшифровкиСодержание.ТекстПодвала = СуммаПоказателя;
	ФормаРасшифровки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвал()
	
	Элементы.КормаПроцентСВ.ТекстПодвала = Окр(Объект.Корма.Итог("ПроцентСВ"));

КонецПроцедуры // ОбновитьПодвал()

	
#КонецОбласти



