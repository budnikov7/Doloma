&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЕСЛИ ОТКРЫВАЮТ РУКАМИ, А НЕ ПРОГРАММНО, ТО ЗАКРОЕМ
	Если Не ЗначениеЗаполнено(Объект.ОбъектЗаполнения) И ТипЗнч(Объект.ОбъектЗаполнения)<>Тип("СправочникСсылка.РодословнаяЖивотных") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьШапкуФормы();
	
	УстановитьПоляЗаполнения();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьШапкуФормы()
	
	НаименованиеОбъекта = ?(Метаданные.Документы.Содержит(Объект.ОбъектЗаполнения.Метаданные()), 
							" документ " + Символ(34) + Объект.ОбъектЗаполнения.Метаданные() + Символ(34), 
							" справочник " + Символ(34) + Объект.ОбъектЗаполнения.Метаданные() + Символ(34));
	
	
	ЭтаФорма.Заголовок = "Загрузка данных в" + НаименованиеОбъекта; 
	
	Если НаименованиеОбъекта = " документ ""Индексы быков""" Тогда 
		Элементы.ОписаниеПоискаНадпись.Видимость 		= Ложь;
		Элементы.ОписаниеПоискаИндексыБыков.Видимость 	= Истина; 
	Иначе
		Элементы.ОписаниеПоискаНадпись.Видимость 		= Истина;
		Элементы.ОписаниеПоискаИндексыБыков.Видимость 	= Ложь; 
	КонецЕсли;
	
	Если НаименованиеОбъекта = " справочник ""Родословная животных""" Тогда
		Элементы.ПеренестиВДокумент.Заголовок = "Создать родословные";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УстановитьПоляЗаполнения()
	
	ТабличноеПолеДанных.Очистить();
	
	//МАКЕТ И ОБЛАСТИ ЗАПОЛНЕНИЯ
	ОбработкаОбъект 	= РеквизитФормыВЗначение("Объект");
	
	Макет 					= ОбработкаОбъект.ПолучитьМакет("МакетТабличногоПоля");
	ОбязательнаяОбласть 	= Макет.ПолучитьОбласть("Шапка|ОбязательноеПоле");
	ДопОбласть				= Макет.ПолучитьОбласть("Шапка|ДополнительноеПоле");
	
	МассивПолейЗаполнения = Новый Массив;
	
	//ДЛЯ КАЖДОГО ДОКУМЕНТА РАЗНЫЕ ТИПЫ, ОПРЕДЕЛИМ
	Если ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ДобавлениеЖивотного") Тогда
		
		МассивПолейЗаполнения = Документы.ДобавлениеЖивотного.ПолучитьПоляЗаполнения();
		
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ИндексыБыков") Тогда
		
		МассивПолейЗаполнения = Документы.ИндексыБыков.ПолучитьПоляЗаполнения();
		
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		МассивПолейЗаполнения = Документы.ПоступлениеТоваровУслуг.ПолучитьПоляЗаполнения();
		
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.КонтрольнаяДойка") Тогда
		
		МассивПолейЗаполнения = Документы.КонтрольнаяДойка.ПолучитьПоляЗаполнения();   
		
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.Взвешивание") Тогда
		
		МассивПолейЗаполнения = Документы.Взвешивание.ПолучитьПоляЗаполнения();
		
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("СправочникСсылка.РодословнаяЖивотных") Тогда
		
		МассивПолейЗаполнения = Справочники.РодословнаяЖивотных.ПолучитьПоляЗаполнения();
		
	КонецЕсли;
	
	Для каждого СтрокаМассива Из МассивПолейЗаполнения Цикл
			
			ОбластьВывода = ?(СтрокаМассива.ОбязательноеПоле, ОбязательнаяОбласть, ДопОбласть);
			
			ОбластьВывода.Параметры.НазваниеКолонки = СтрокаМассива.ИмяКолонки;
			Настройки = ТабличноеПолеДанных.Присоединить(ОбластьВывода);
			Настройки.ШиринаКолонки = СтрДлина(СтрокаМассива.ИмяКолонки) * 1.5;
	КонецЦикла;
	
КонецФункции


//КОМАНДНАЯ ПАНЕЛЬ
&НаКлиенте
Процедура Далее(Команда)
	
	//ПРОВЕРИМ ЕСТЬ ЛИ ДАННЫЕ
	Если Не ЗначениеЗаполнено(ТабличноеПолеДанных.Область(2, 1, 2, 1).Текст) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещение", ОбщегоНазначения);
		ПоказатьПредупреждение(ОписаниеОповещения, "Таблица данных пуста. Перенесите данные из внешнего файла");
		Возврат;
	КонецЕсли;
	
	СопоставитьДанные();
	
КонецПроцедуры

&НаСервере
Функция СопоставитьДанные()
	
	МассивПолейЗаполнения = Неопределено;
	
	//ПОЛУЧИМ ПОЛЯ ЗАПОЛЕНИЯ ПО ДОКУМЕНТУ
	Если ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ДобавлениеЖивотного") Тогда
		МассивПолейЗаполнения 	= Документы.ДобавлениеЖивотного.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ИндексыБыков") Тогда
		МассивПолейЗаполнения 	= Документы.ИндексыБыков.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		МассивПолейЗаполнения = Документы.ПоступлениеТоваровУслуг.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.КонтрольнаяДойка") Тогда
		МассивПолейЗаполнения = Документы.КонтрольнаяДойка.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.Взвешивание") Тогда
		МассивПолейЗаполнения = Документы.Взвешивание.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("СправочникСсылка.РодословнаяЖивотных") Тогда
		МассивПолейЗаполнения = Справочники.РодословнаяЖивотных.ПолучитьПоляЗаполнения();
	КонецЕсли;
	
	Если МассивПолейЗаполнения <> Неопределено Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
		ТаблицаЗначений.Колонки.Добавить("Номер");
		Для каждого НазванияКолонки Из МассивПолейЗаполнения Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(НазванияКолонки.Тип);
			ТаблицаЗначений.Колонки.Добавить(НазванияКолонки.Имя, Новый ОписаниеТипов(МассивТипов));
		КонецЦикла;
	КонецЕсли;
	
	//ЗАПОЛНЯЕМ ДАННЫЕ (принцип одинаковый для всех документов)
	
	//ЧИТАЕМ ЗНАЧЕНИЯ И ПЫТАЕМСЯ НАЙТИ В БАЗЕ ПО ТИПУ
		//ЕСЛИ НЕ НАХОДИМ, ТО ДАДИМ ШАНС ЗАПОЛНИТЬ ПОЛЬЗОВАТЕЛЮ
		
		НомерСтроки = 2;
		
		Пока ЗначениеЗаполнено(ТабличноеПолеДанных.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) Цикл
			
			НоваяСтрокаИтоговойТаблицы = ТаблицаЗначений.Добавить();
			
			//ПРОБЕГАЕМСЯ ПО ВСЕМ КОЛОНКАМ ЭТОЙ СТРОКИ
			Для Счет = 1 По МассивПолейЗаполнения.Количество() Цикл
				
				ЗначениеЯчейки 	= ТабличноеПолеДанных.Область(НомерСтроки, Счет, НомерСтроки, Счет).Текст;
				ДанныеКолонки 	= МассивПолейЗаполнения.Получить(Счет - 1);
				
				Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
					Продолжить;
				КонецЕсли;
				
				//ПРОБУЕМ ПРЕОБРАЗОВАТЬ К ТИПУ КОЛОНКИ
				Если ДанныеКолонки.Тип = Тип("Строка") Тогда
					
					Если ЗначениеЯчейки = "NULL" Тогда
						НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = ""; 
					Иначе	
						НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = ЗначениеЯчейки; 
					КонецЕсли;
					
				ИначеЕсли ДанныеКолонки.Тип = Тип("Булево") Тогда
					
					Попытка 
						ПреобразованноеБулево = Булево(ЗначениеЯчейки);
					Исключение
						ПреобразованноеБулево = Ложь;
					КонецПопытки;
					
					НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = ПреобразованноеБулево;
					
				ИначеЕсли ДанныеКолонки.Тип = Тип("Число") Тогда
					
					Попытка 
						ПреобразованноеЧисло = Число(ЗначениеЯчейки);
					Исключение
						ПреобразованноеЧисло = 0;
					КонецПопытки;
					
					НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = ПреобразованноеЧисло;
					
				ИначеЕсли ДанныеКолонки.Тип = Тип("Дата") Тогда
					
					Если СтрДлина(ЗначениеЯчейки) = 8 Тогда 
						ДеньМесяц = Лев(ЗначениеЯчейки, 6);
						Год = "" + "20" + Сред(ЗначениеЯчейки, 7, 2);
						
						ЗначениеЯчейки = "" + ДеньМесяц + Год;
					КонецЕсли;					
					
					СтрокаДаты = СокрЛП(ЗначениеЯчейки) + " 00:00:00";
					Попытка
						ПреобразованнаяДата = Дата(СтрокаДаты);
					Исключение 
						ПреобразованнаяДата = Дата(1, 1, 1);
					КонецПопытки;
					
					НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = ПреобразованнаяДата;					
					
				Иначе
					
					//ПРОВЕРКА НА СПРАВОЧНИКИ ИЛИ ПЕРЕЧИСЛЕНИЯ
					ПустаяСсылка = Новый (ДанныеКолонки.Тип);
					МетаданныеОбъекта = ПустаяСсылка.Метаданные();
					
					Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
						
						Попытка
							НайденноеЗначение = Перечисления[МетаданныеОбъекта.Имя][ЗначениеЯчейки];
						Исключение
							НайденноеЗначение = Перечисления[МетаданныеОбъекта.Имя].ПустаяСсылка()	
						КонецПопытки;
						
						НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = НайденноеЗначение;
					ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
						
						МенеджерСправочника = Справочники[МетаданныеОбъекта.Имя];
						
						//ПОИСК ПО НОМЕРУ
						НайденноеЗначение = МенеджерСправочника.НайтиПоКоду(ЗначениеЯчейки);
						
						Если Не НайденноеЗначение = МенеджерСправочника.ПустаяСсылка() Тогда
							НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = НайденноеЗначение;
							Продолжить;
						КонецЕсли;
						
						//ЕСЛИ ДОШЛО СЮДА, ЗНАЧИТ ПО НОМЕРУ НЕ НАШЛО, ИЩЕМ ПО НАИМЕНОВАНИЮ
						НайденноеЗначение = МенеджерСправочника.НайтиПоНаименованию(ЗначениеЯчейки);
						
						Если Не НайденноеЗначение = МенеджерСправочника.ПустаяСсылка() Тогда
							НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = НайденноеЗначение;
							Продолжить;
						КонецЕсли;
						
						//ЕСЛИ ДОШЛО СЮДА, ТО ПРОБУЕМ ИСКАТЬ ПО БИРКЕ
						Если МетаданныеОбъекта.Реквизиты.Найти("Бирка") = Неопределено Тогда
							//ТАКОГО РЕКВИЗИТА НЕТ, СТАВИМ ПУСТОЕ ЗНАЧЕНИЕ
							НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = МенеджерСправочника.ПустаяСсылка();
						Иначе
							//РЕКВИЗИТ ЕСТЬ, ИЩЕМ ПО НЕМУ
							НайденноеЗначение = МенеджерСправочника.НайтиПоРеквизиту("Бирка", ЗначениеЯчейки);
							НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = НайденноеЗначение;
						КонецЕсли; 
						
						//ЕСЛИ ДОШЛО СЮДА, ТО ПРОБУЕМ ИСКАТЬ ПО КодБыка
						Если МетаданныеОбъекта.Реквизиты.Найти("КодСемени") = Неопределено Тогда
							//ТАКОГО РЕКВИЗИТА НЕТ, СТАВИМ ПУСТОЕ ЗНАЧЕНИЕ
							НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = МенеджерСправочника.ПустаяСсылка();
						Иначе
							//РЕКВИЗИТ ЕСТЬ, ИЩЕМ ПО НЕМУ
							НайденноеЗначение = МенеджерСправочника.НайтиПоРеквизиту("КодСемени", ЗначениеЯчейки);
							НоваяСтрокаИтоговойТаблицы[ДанныеКолонки.Имя] = НайденноеЗначение;
						КонецЕсли;
					КонецЕсли;						
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрокаИтоговойТаблицы["Номер"] = НомерСтроки - 1;
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		//ПЕРЕНОС ТАБЛИЦЫ НА ФОРМУ
		Элементы.ГруппаТабличногоПоля.Видимость 			= Ложь;
		Элементы.ГруппаСопоставленияРезультата.Видимость 	= Истина;
		
		Если НЕ Элементы.ТаблицаСопоставленияРезультатов.ПодчиненныеЭлементы.Количество() Тогда
			
			Для каждого КолонкаТаблицыЗначений Из ТаблицаЗначений.Колонки Цикл
				
				МассивДобавляемыхРеквизитов = Новый Массив; 
				МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(КолонкаТаблицыЗначений.Имя, КолонкаТаблицыЗначений.ТипЗначения, "ТаблицаСопоставленияРезультатов")); 
				
				ИзменитьРеквизиты(МассивДобавляемыхРеквизитов); 
					
				НоваяКолонка = Элементы.Добавить(КолонкаТаблицыЗначений.Имя, Тип("ПолеФормы"), Элементы.ТаблицаСопоставленияРезультатов); 
				НоваяКолонка.ПутьКДанным = "ТаблицаСопоставленияРезультатов." + КолонкаТаблицыЗначений.Имя; 
				НоваяКолонка.Вид = ВидПоляФормы.ПолеВвода; 
				
			КонецЦикла;	
		Иначе
			ТаблицаСопоставленияРезультатов.Очистить();
		КонецЕсли;
		
		ТаблицаСопоставленияРезультатов.Загрузить(ТаблицаЗначений.Скопировать());

КонецФункции

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	НазадНаСервере();
	
КонецПроцедуры

&НаСервере
Функция НазадНаСервере()
	
	Элементы.ГруппаТабличногоПоля.Видимость 			= Истина;
	Элементы.ГруппаСопоставленияРезультата.Видимость 	= Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Отказ = ПроверкаЗаполненияНаСервере();
	
	Если Не Отказ Тогда    
		Если ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ДобавлениеЖивотного") Тогда
			Оповестить("ЗаполнениеДанныхИзФайлаДобавлениеЖивотного", ТаблицаСопоставленияРезультатов, ОбщегоНазначения.ТекущийПользователь());	
		ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ИндексыБыков") Тогда
			Оповестить("ЗаполнениеДанныхИзФайлаИндексыБыков", ТаблицаСопоставленияРезультатов, ОбщегоНазначения.ТекущийПользователь());
		ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Оповестить("ЗаполнениеДанныхИзФайлаПоступлениеТоваровУслуг", ТаблицаСопоставленияРезультатов, ОбщегоНазначения.ТекущийПользователь());
		ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.КонтрольнаяДойка") Тогда
			Оповестить("ЗаполнениеДанныхИзФайлаКонтрольнаяДойка", ТаблицаСопоставленияРезультатов, ОбщегоНазначения.ТекущийПользователь()); 
		ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.Взвешивание") Тогда
			Оповестить("ЗаполнениеДанныхИзФайлаВзвешивание", ТаблицаСопоставленияРезультатов, ОбщегоНазначения.ТекущийПользователь()); 
		ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("СправочникСсылка.РодословнаяЖивотных") Тогда
			Оповестить("ЗаполнениеДанныхИзФайлаРодословнаяЖивотных", ТаблицаСопоставленияРезультатов, ОбщегоНазначения.ТекущийПользователь());
		КонецЕсли;
		
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЗаполненияНаСервере()
	
	Отказ = Ложь;
	
	//ПРОВЕРИМ ВСЕ ЛИ ДАННЫЕ ЗАПОЛНЕНЫ
	Если ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ДобавлениеЖивотного") Тогда
		МассивДанныхЗаполнения = Документы.ДобавлениеЖивотного.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ИндексыБыков") Тогда
		МассивДанныхЗаполнения = Документы.ИндексыБыков.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		МассивДанныхЗаполнения = Документы.ПоступлениеТоваровУслуг.ПолучитьПоляЗаполнения();
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.КонтрольнаяДойка") Тогда
	    МассивДанныхЗаполнения = Документы.КонтрольнаяДойка.ПолучитьПоляЗаполнения(); 
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("ДокументСсылка.Взвешивание") Тогда
	    МассивДанныхЗаполнения = Документы.Взвешивание.ПолучитьПоляЗаполнения(); 
	ИначеЕсли ТипЗнч(Объект.ОбъектЗаполнения) = Тип("СправочникСсылка.РодословнаяЖивотных") Тогда
	    МассивДанныхЗаполнения = Справочники.РодословнаяЖивотных.ПолучитьПоляЗаполнения();
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ТаблицаСопоставленияРезультатов Цикл
		Для каждого ПолеПроверки Из МассивДанныхЗаполнения Цикл
			Если ПолеПроверки.ОбязательноеПоле И Не ЗначениеЗаполнено(СтрокаТабличнойЧасти[ПолеПроверки.Имя]) Тогда
				Отказ = Истина;
				Сообщить("Не заполнены данных в колонке " + ПолеПроверки.ИмяКолонки + " в строке номер " + (ТаблицаСопоставленияРезультатов.Индекс(СтрокаТабличнойЧасти) + 1));
			КонецЕсли;
		КонецЦикла
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

