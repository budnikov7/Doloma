
 #Область ОбработчикиСобытийФормы
 	
 #КонецОбласти

 #Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НомераРаздачПриАктивизацииСтроки(Элемент) 
	
	ТекущиеДанные = Элементы.Раздачи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьОтборРаздачи(ТекущиеДанные.КлючСвязи);
	
КонецПроцедуры

&НаКлиенте
Процедура РаздачиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Раздачи.ТекущиеДанные;
	КлючСвязи = ТекущиеДанные.КлючСвязи;
	Если ЗначениеЗаполнено(КлючСвязи) Тогда
		СтрОтбора = Новый Структура("КлючСвязи", КлючСвязи);
		СвязанныеКорпуса = Объект.Корпуса.НайтиСтроки(СтрОтбора);
		Для каждого Строчка Из СвязанныеКорпуса Цикл
			Объект.Корпуса.Удалить(Строчка);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура КорпусаПриИзменении(Элемент)
	РассчитатьПоказателиКормления();
	ИзмененаМасса = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КорпусаКорпусКормленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Корпуса.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗаполнитьПоказателиКорпусаНаСервере(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РаздачиРационПриИзменении(Элемент)
	ТекРаздача = Элементы.Раздачи.ТекущиеДанные;
	ПересчитатьКорпусаРаздачи(ТекРаздача.КлючСвязи);
КонецПроцедуры

&НаКлиенте
Процедура КорпусаМассаРаздачиПриИзменении(Элемент)
	ИзмененаМасса = Истина;
	РассчитатьПоказателиКормления();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ДобавитьРаздачу(Команда)
	
	НоваяРаздача 			= Объект.Раздачи.Добавить();
	КлючСвязи 				= Новый УникальныйИдентификатор;
	НоваяРаздача.КлючСвязи 	= КлючСвязи;
	УстановитьОтборРаздачи(КлючСвязи);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКорпусВРаздачу(Команда)
	
	ТекущиеДанные = Элементы.Раздачи.ТекущиеДанные;  
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(,"Выделите раздачу, в которую нужно добавить корпус");
		Возврат;
	КонецЕсли; 
	
	КлючСвязи 	= ТекущиеДанные.КлючСвязи;
	НоваяСтрока = Объект.Корпуса.Добавить();
	НоваяСтрока.КлючСвязи = КлючСвязи;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьКорма(Команда)

	ТекРаздача	= Элементы.Раздачи.ТекущиеДанные;
	Если ТекРаздача = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТабДок = РасчетПотребностиВКормах(ТекРаздача.Рацион, ТекРаздача.КлючСвязи, ТекРаздача.НомерСтроки);
	ТабДок.Показать("Детализация кормов");

КонецПроцедуры 

&НаКлиенте
Процедура ПотребностьВМК(Команда)

	ТабДок = ПотребностьВМКНаСервере();
	ТабДок.Показать("Потребность в минеральных кормах");
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРаздачи(Команда)
	
	ТабДок = ПланРаздачиНаСервере();
	ТабДок.Показать("План раздачи");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКормораздатчик(Команда)
	
	ТекКорпус = Элементы.Корпуса.ТекущиеДанные;
	Если ТекКорпус = Неопределено Тогда
		ПоказатьПредупреждение(,"Выберите корпус для заполнения.");
		Возврат;	
	КонецЕсли;
	
	ТекРаздача = Элементы.Раздачи.ТекущиеДанные;
	ВесРациона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекРаздача.Рацион, "Вес");
	ЗаполненностьМиксера = ТекРаздача.ЗаполненностьМиксера; 
	НужныйПроцентЗагрузки = 100 - ЗаполненностьМиксера + ТекКорпус.ПроцентЗагрузки;
	Если ЗаполненностьМиксера <> 100 И НужныйПроцентЗагрузки > 0 Тогда 
		МаксЗагрузка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекРаздача.Кормораздатчик, "МаксимальнаяЗагрузка");
   		НужнаяМасса = МаксЗагрузка * НужныйПроцентЗагрузки / 100;
		ТекКорпус.ПроцентСуточногоКормления = 100 * НужнаяМасса / ВесРациона / ТекКорпус.КоличествоГолов / ТекКорпус.КоэффициентКормления;
		РассчитатьПоказателиКормления();
	Иначе	
		Возврат;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьКорпуса(Команда)
	
	Для каждого Строчка Из Объект.Корпуса Цикл
		
		ЗаполнитьПоказателиКорпусаНаСервере(Строчка.ПолучитьИдентификатор());
		
		СтрОтбора = Новый Структура("КлючСвязи", Строчка.КлючСвязи);
		КорпусаВРаздаче = Объект.Корпуса.НайтиСтроки(СтрОтбора);
		ЭтоПервыйКорпусВРаздаче = (Строчка.НомерСтроки = КорпусаВРаздаче[0].НомерСтроки);
		
		РассчитатьПоказателиКормления(Строчка, ЭтоПервыйКорпусВРаздаче);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьРацион(Команда)
	
	ТекРаздача = Элементы.Раздачи.ТекущиеДанные; 
	ТекРацион = Неопределено;
	Если ТекРаздача <> Неопределено И ЗначениеЗаполнено(ТекРаздача.Рацион) Тогда
		ТекРацион = ТекРаздача.Рацион;
	КонецЕсли; 
	
	ПараметрыЗамены = Новый Структура("Ферма, ТекущийРацион", Объект.Ферма, ТекРацион); 
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыЗамены", ЭтотОбъект, "ЗаменаРациона");
	ОткрытьФорму("Документ.ПланЗагрузки.Форма.ФормаЗаменыРациона", ПараметрыЗамены, ЭтотОбъект,,,,ОбработкаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьКормораздатчик(Команда)
	
	ТекРаздача = Элементы.Раздачи.ТекущиеДанные; 
	ТекКормораздатчик = Неопределено;
	Если ТекРаздача <> Неопределено И ЗначениеЗаполнено(ТекРаздача.Кормораздатчик) Тогда
		ТекКормораздатчик = ТекРаздача.Кормораздатчик;
	КонецЕсли; 
	
	ПараметрыЗамены = Новый Структура("Ферма, ТекущийКормораздатчик", Объект.Ферма, ТекКормораздатчик); 
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыЗамены", ЭтотОбъект, "ЗаменаКормораздатчика");
	ОткрытьФорму("Документ.ПланЗагрузки.Форма.ФормаЗаменыКормораздатчика", ПараметрыЗамены, ЭтотОбъект,,,,ОбработкаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьТракториста(Команда)
	
	ТекРаздача = Элементы.Раздачи.ТекущиеДанные; 
	ТекТракторист = Неопределено;
	Если ТекРаздача <> Неопределено И ЗначениеЗаполнено(ТекРаздача.Тракторист) Тогда
		ТекТракторист = ТекРаздача.Тракторист;
	КонецЕсли; 
	
	ПараметрыЗамены = Новый Структура("Ферма, ТекущийТракторист", Объект.Ферма, ТекТракторист); 
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииФормыЗамены", ЭтотОбъект, "ЗаменаТракториста");
	ОткрытьФорму("Документ.ПланЗагрузки.Форма.ФормаЗаменыТракториста", ПараметрыЗамены, ЭтотОбъект,,,,ОбработкаВыбора);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПриЗакрытииФормыЗамены(Значение, ДопПараметры) Экспорт

    Если Значение = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	ТекущееЗначение = Значение.ТекущееЗначение;
    Замена = Значение.Замена; 
	Если НЕ ЗначениеЗаполнено(ТекущееЗначение) Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДопПараметры = "ЗаменаРациона" Тогда 
		
		СтрОтбора = Новый Структура("Рацион", ТекущееЗначение);
		НайденныеСтроки = Объект.Раздачи.НайтиСтроки(СтрОтбора); 
		Для каждого Строчка Из НайденныеСтроки Цикл
			Строчка.Рацион = Замена;
			ПересчитатьКорпусаРаздачи(Строчка.КлючСвязи);
		КонецЦикла;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
	
	ИначеЕсли ДопПараметры = "ЗаменаКормораздатчика" Тогда 
		
		СтрОтбора = Новый Структура("Кормораздатчик", ТекущееЗначение);
		НайденныеСтроки = Объект.Раздачи.НайтиСтроки(СтрОтбора); 
		Для каждого Строчка Из НайденныеСтроки Цикл
			Строчка.Кормораздатчик = Замена;
			ПересчитатьКорпусаРаздачи(Строчка.КлючСвязи);
		КонецЦикла;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ДопПараметры = "ЗаменаТракториста" Тогда 
	
		СтрОтбора = Новый Структура("Тракторист", ТекущееЗначение);
		НайденныеСтроки = Объект.Раздачи.НайтиСтроки(СтрОтбора); 
		Для каждого Строчка Из НайденныеСтроки Цикл
			Строчка.Тракторист = Замена;
		КонецЦикла;
		Если НайденныеСтроки.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
	
	КонецЕсли;
    
КонецПроцедуры           
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПересчитатьКорпусаРаздачи(КлючСвязи)

	СтрОтбора = Новый Структура("КлючСвязи", КлючСвязи);
	СвязанныеКорпуса = Объект.Корпуса.НайтиСтроки(СтрОтбора);
	Для каждого Строчка Из СвязанныеКорпуса Цикл
		РассчитатьПоказателиКормления(Строчка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РасчетПотребностиВКормах(Рацион, КлючСвязи, Раздача)
	
	ТЗКорпуса = Новый ТаблицаЗначений;
	ТЗКорпуса.Колонки.Добавить("Корпус", Новый ОписаниеТипов("СправочникСсылка.КорпусаКормления")); 
	ТЗКорпуса.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	ТЗКорпуса.Колонки.Добавить("КлючСвязи", Новый ОписаниеТипов("Булево"));
	
	СтрОтбора = Новый Структура("КлючСвязи", КлючСвязи);
	НайденныеКорпуса = Объект.Корпуса.НайтиСтроки(стрОтбора);
	Для каждого ТекКорпус Из НайденныеКорпуса Цикл
		НоваяСтрока = ТЗКорпуса.Добавить();
		НоваяСтрока.Корпус = ТекКорпус.КорпусКормления;
		НоваяСтрока.Коэффициент = ТекКорпус.КоличествоГолов * ТекКорпус.КоэффициентКормления * ТекКорпус.ПроцентСуточногоКормления / 100;
		НоваяСтрока.КлючСвязи = Истина;
	КонецЦикла;  
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗКорпуса", ТЗКорпуса);
	
	Схема 				= Документы.ПланЗагрузки.ПолучитьМакет("МакетСКДКорма");
	Настройки 			= Схема.НастройкиПоУмолчанию;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	ПараметрРацион 								= Новый ПараметрКомпоновкиДанных("Рацион");
	ЗначениеПараметраРацион 					= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрРацион);
	ЗначениеПараметраРацион.Значение 			= Рацион;
	ЗначениеПараметраРацион.Использование 		= Истина; 
	ПараметрДата 								= Новый ПараметрКомпоновкиДанных("Дата");
	ЗначениеПараметраДата 						= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрДата);
	ЗначениеПараметраДата.Значение 				= Объект.Дата;
	ПараметрФерма 								= Новый ПараметрКомпоновкиДанных("Ферма");
	ЗначениеПараметраФерма 						= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрФерма);
	ЗначениеПараметраФерма.Значение 			= Объект.Ферма;
	ПараметрРаздача								= Новый ПараметрКомпоновкиДанных("Раздача");
	ЗначениеПараметраРаздача 					= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрРаздача);
	ЗначениеПараметраРаздача.Значение 			= Раздача; 
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 			= КомпоновщикМакета.Выполнить(Схема, Настройки);
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.ОтображатьЗаголовки 	= Ложь;
	ДокументРезультат.ОтображатьСетку 		= Ложь;
	ДокументРезультат.АвтоМасштаб 			= Истина;
	
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Функция ПотребностьВМКНаСервере()
	
	Рационы = Новый Массив;
	ТЗРаздачи = Новый ТаблицаЗначений;
	ТЗРаздачи.Колонки.Добавить("Раздача", Новый ОписаниеТипов("Число"));
	ТЗРаздачи.Колонки.Добавить("Рацион", Новый ОписаниеТипов("СправочникСсылка.Рационы")); 
	ТЗРаздачи.Колонки.Добавить("КоэффициентРаздачи", Новый ОписаниеТипов("Число"));
	Для каждого стрРаздача Из Объект.Раздачи Цикл
		стрОтбора = Новый Структура("КлючСвязи", стрРаздача.КлючСвязи);	
		НайденныеКорпуса = Объект.Корпуса.НайтиСтроки(стрОтбора); 
		КоэффициентРаздачи = 0;
	    Для каждого ТекКорпус Из НайденныеКорпуса Цикл
			КоэффициентРаздачи = КоэффициентРаздачи + ТекКорпус.КоличествоГолов * ТекКорпус.КоэффициентКормления * ТекКорпус.ПроцентСуточногоКормления / 100;	
		КонецЦикла;
		
		Если Рационы.Найти(стрРаздача.Рацион) = Неопределено Тогда
			Рационы.Добавить(стрРаздача.Рацион);
		КонецЕсли;
		НоваяРаздача = ТЗРаздачи.Добавить();
		НоваяРаздача.Раздача 			= стрРаздача.НомерСтроки;
		НоваяРаздача.Рацион 			= стрРаздача.Рацион;
		НоваяРаздача.КоэффициентРаздачи = КоэффициентРаздачи;
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗРаздачи", ТЗРаздачи); 
	
	Схема 				= Документы.ПланЗагрузки.ПолучитьМакет("МакетСКДМинеральныеКорма");
	Настройки 			= Схема.НастройкиПоУмолчанию;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	ПараметрДата 						= Новый ПараметрКомпоновкиДанных("Дата");
	ЗначениеПараметраДата 				= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрДата);
	ЗначениеПараметраДата.Значение 		= Объект.Дата;
	ПараметрФерма 						= Новый ПараметрКомпоновкиДанных("Ферма");
	ЗначениеПараметраФерма 				= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрФерма);
	ЗначениеПараметраФерма.Значение 	= Объект.Ферма; 
	ПараметрРационы 					= Новый ПараметрКомпоновкиДанных("Рационы");
	ЗначениеПараметраРационы 			= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрРационы);
	ЗначениеПараметраРационы.Значение 	= Рационы; 
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 			= КомпоновщикМакета.Выполнить(Схема, Настройки);
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных); 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.ОтображатьЗаголовки 	= Ложь;
	ДокументРезультат.ОтображатьСетку 		= Ложь;
	ДокументРезультат.АвтоМасштаб 			= Истина;
	
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Функция ПланРаздачиНаСервере()
	
	ТЗРаздачи = Новый ТаблицаЗначений;
	ТЗРаздачи.Колонки.Добавить("Раздача", Новый ОписаниеТипов("Число"));
	ТЗРаздачи.Колонки.Добавить("Корпус", Новый ОписаниеТипов("СправочникСсылка.КорпусаКормления"));
	ТЗРаздачи.Колонки.Добавить("Масса", Новый ОписаниеТипов("Число"));
	Для каждого стрРаздача Из Объект.Раздачи Цикл
		стрОтбора = Новый Структура("КлючСвязи", стрРаздача.КлючСвязи);
		НайденныеКорпуса = Объект.Корпуса.НайтиСтроки(стрОтбора);
		
		Для Каждого СтрокаКорпуса Из НайденныеКорпуса Цикл
			НоваяРаздача = ТЗРаздачи.Добавить();
			НоваяРаздача.Раздача	= стрРаздача.НомерСтроки;
			НоваяРаздача.Корпус 	= СтрокаКорпуса.КорпусКормления;
			НоваяРаздача.Масса 		= СтрокаКорпуса.МассаРаздачи;
		КонецЦикла;
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗРаздачи", ТЗРаздачи);
	
	Схема 				= Документы.ПланЗагрузки.ПолучитьМакет("МакетСКДПланРаздачи");
	Настройки 			= Схема.НастройкиПоУмолчанию;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	ПараметрДата 						= Новый ПараметрКомпоновкиДанных("Дата");
	ЗначениеПараметраДата 				= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрДата);
	ЗначениеПараметраДата.Значение 		= Объект.Дата;
	ПараметрФерма 						= Новый ПараметрКомпоновкиДанных("Ферма");
	ЗначениеПараметраФерма 				= КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрФерма);
	ЗначениеПараметраФерма.Значение 	= Объект.Ферма;
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	КомпоновщикМакета 			= Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки 			= КомпоновщикМакета.Выполнить(Схема, Настройки);
	ПроцессорКомпоновкиДанных 	= Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ОбъединитьЯчейкиВТабличномДокументе(ДокументРезультат);
	
	ДокументРезультат.ОтображатьЗаголовки 	= Ложь;
	ДокументРезультат.ОтображатьСетку 		= Ложь;
	ДокументРезультат.АвтоМасштаб 			= Истина;
	
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Процедура ОбъединитьЯчейкиВТабличномДокументе(ТабличныйДокумент) Экспорт
	
	СтараяРаздача = "";
	НачалоОбласти = "";
	ЭтоПервыйВход = Истина;

	ОбластьЛевыйВерхнийУгол = 6;
	ОбластьПравыйНижнийУгол = 6;
	
	ВысотаТЧ = ТабличныйДокумент.ВысотаТаблицы;
	
	Для Сч = 6 По ВысотаТЧ Цикл
		ТекОбласть = "R" + Сч + "C1:R" + Сч + "C1";
		НайденнаяОбласть = ТабличныйДокумент.Область(ТекОбласть);
		
		Если ТекОбласть <> НачалоОбласти И НайденнаяОбласть.Текст <> СтараяРаздача Тогда 
			Если НЕ ЭтоПервыйВход  Тогда 
				ГотоваяОбластьДляОбъединения = "R" + Строка(ОбластьЛевыйВерхнийУгол) + "C1:R" +  Строка(Сч-1) + "C1";
				
				ОбластьЛевыйВерхнийУгол = Сч;
				ОбластьПравыйНижнийУгол = Сч;
				
				Область = ТабличныйДокумент.Область(ГотоваяОбластьДляОбъединения);
				Область.Объединить();
			Иначе
				ЭтоПервыйВход = Ложь;
			КонецЕсли;
			
			НачалоОбласти = ТекОбласть;
			СтараяРаздача = НайденнаяОбласть.Текст;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборРаздачи(КлючСвязи)

	Элементы.Корпуса.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("КлючСвязи", КлючСвязи));

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПоказателиКорпусаНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.Корпуса.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТекКорпус = ТекущиеДанные.КорпусКормления;
	Если НЕ ЗначениеЗаполнено(ТекКорпус) Тогда
		ТекущиеДанные.КоличествоГолов 		= 0;
		ТекущиеДанные.СВ 					= 0;
		ТекущиеДанные.МассаРаздачи			= 0;
		ТекущиеДанные.КоэффициентКормления	= 0;
		Возврат;
	КонецЕсли;
	
	РеквизитыКорпуса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекКорпус,
		"КоличествоГолов,Рацион,СВ,МассаРаздачи,КоэффициентКормления");
	
	ТекущиеДанные.Рацион = РеквизитыКорпуса.Рацион;
	Если РеквизитыКорпуса.КоличествоГолов > 0 Тогда
		ТекущиеДанные.КоличествоГолов = РеквизитыКорпуса.КоличествоГолов;
	КонецЕсли;
	Если РеквизитыКорпуса.СВ > 0 Тогда
		ТекущиеДанные.СВ = РеквизитыКорпуса.СВ;
	КонецЕсли;
	Если РеквизитыКорпуса.МассаРаздачи > 0 Тогда
		ТекущиеДанные.МассаРаздачи = РеквизитыКорпуса.МассаРаздачи;
	КонецЕсли;
	Если РеквизитыКорпуса.КоэффициентКормления > 0 Тогда
		ТекущиеДанные.КоэффициентКормления = РеквизитыКорпуса.КоэффициентКормления;
	КонецЕсли;
	
	СтрОтбора = Новый Структура("КорпусКормления", ТекКорпус);
	СвязанныеКорпуса = Объект.Корпуса.НайтиСтроки(СтрОтбора);
	НомерПоследнейСтроки = 0;
	ПроцентКормления = 0;

	Для каждого Строчка Из СвязанныеКорпуса Цикл
		НомерПоследнейСтроки = Строчка.НомерСтроки;
		Если Строчка.НомерСтроки < ТекущиеДанные.НомерСтроки Тогда
			ПроцентКормления = ПроцентКормления + Строчка.ПроцентСуточногоКормления;
		КонецЕсли;
	КонецЦикла;

	ТекущийПроцент = Макс(100 - ПроцентКормления, 0);
	Если ТекущиеДанные.НомерСтроки = НомерПоследнейСтроки ИЛИ ТекущиеДанные.ПроцентСуточногоКормления = 0
		ИЛИ ТекущийПроцент = 0 ИЛИ (ПроцентКормления + ТекущиеДанные.ПроцентСуточногоКормления) >= 100 Тогда
		ТекущиеДанные.ПроцентСуточногоКормления = ТекущийПроцент;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказателиКормления(ТекКорпус = Неопределено, ПерезаполнитьРацион = Ложь)
	
	Если ТекКорпус = Неопределено Тогда
		ТекКорпус = Элементы.Корпуса.ТекущиеДанные;
	КонецЕсли;
	Если ТекКорпус = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоказателиКормленияНаСервере(ТекКорпус.ПолучитьИдентификатор(), ПерезаполнитьРацион);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиКормленияНаСервере(ИдентификаторСтроки, ПерезаполнитьРацион)
	
	ТекКорпус = Объект.Корпуса.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрОтбора = Новый Структура("КлючСвязи", ТекКорпус.КлючСвязи);
	НайденныеРаздачи = Объект.Раздачи.НайтиСтроки(СтрОтбора);
	Если НайденныеРаздачи.Количество() > 0 Тогда
		ТекРаздача = НайденныеРаздачи[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если (НЕ ЗначениеЗаполнено(ТекРаздача.Рацион) ИЛИ ПерезаполнитьРацион) И ЗначениеЗаполнено(ТекКорпус.Рацион) Тогда
		ТекРаздача.Рацион = ТекКорпус.Рацион;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекРаздача.Рацион) Тогда
		РеквизитыРациона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекРаздача.Рацион, "Вес, СуммаСВ");
	Иначе
		Возврат;
	КонецЕсли;

	Если ИзмененаМасса = Ложь Тогда
		ТекКорпус.МассаРаздачи = РеквизитыРациона.Вес * ТекКорпус.КоличествоГолов * ТекКорпус.КоэффициентКормления
			* ТекКорпус.ПроцентСуточногоКормления / 100;
	КонецЕсли;
	
	//ТекКорпус.СодержаниеСВ = ТекКорпус.КоличествоГолов * ТекКорпус.СВ * ТекКорпус.ПроцентСуточногоКормления / 100;
	ПроцентСВРациона = Справочники.Рационы.ПроцентСВРациона(ТекРаздача.Рацион);
	ТекКорпус.СодержаниеСВ = ТекКорпус.МассаРаздачи * ПроцентСВРациона;
	
	ЕстьОшибкиЗаполнения = Ложь;
	Если РеквизитыРациона.Вес = 0 Тогда
		ЕстьОшибкиЗаполнения = Истина;
		ОбщегоНазначения.СообщитьПользователю("Ошибка расчета коэффициента кормления. Вес рациона равен 0.");
	КонецЕсли;
	
	Если ТекКорпус.КоличествоГолов = 0 Тогда
		ЕстьОшибкиЗаполнения = Истина;
		ОбщегоНазначения.СообщитьПользователю("Ошибка расчета коэффициента кормления. Количество голов корпуса равно 0.");
	КонецЕсли;
	
	Если ТекКорпус.ПроцентСуточногоКормления = 0 Тогда
		ЕстьОшибкиЗаполнения = Истина;
		ОбщегоНазначения.СообщитьПользователю("Ошибка расчета коэффициента кормления. Процент суточного кормления корпуса равен 0.");
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения = Ложь Тогда
		ТекКорпус.КоэффициентКормления = ТекКорпус.МассаРаздачи / РеквизитыРациона.Вес / ТекКорпус.КоличествоГолов 
			/ ТекКорпус.ПроцентСуточногоКормления * 100;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекРаздача.Кормораздатчик) Тогда
		МаксЗагрузкаКормораздатчика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекРаздача.Кормораздатчик,
			"МаксимальнаяЗагрузка");
	Иначе
		МаксЗагрузкаКормораздатчика = 0;
	КонецЕсли;
	
	Если МаксЗагрузкаКормораздатчика <> 0 Тогда
		ТекКорпус.ПроцентЗагрузки = 100 * ТекКорпус.МассаРаздачи / МаксЗагрузкаКормораздатчика;
	Иначе
		ОбщегоНазначения.СообщитьПользователю("Ошибка расчета процента загрузки. Максимальная загрузка кормораздатчика равна 0.");
	КонецЕсли;
	
	РассчитатьЗагрузкуМиксераНаСервере(ТекРаздача);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗагрузкуМиксераНаСервере(ТекРаздача)
	
	КлючСвязи = ТекРаздача.КлючСвязи;
	СтрОтбора = Новый Структура("КлючСвязи", КлючСвязи);	
	СвязанныеКорпуса = Объект.Корпуса.НайтиСтроки(СтрОтбора);
	ЗаполненностьМиксера = 0;
	МассаРаздачи = 0;
	Для каждого Строчка Из СвязанныеКорпуса Цикл
		ЗаполненностьМиксера = ЗаполненностьМиксера + Строчка.ПроцентЗагрузки;
		МассаРаздачи = МассаРаздачи + Строчка.МассаРаздачи;
	КонецЦикла;
	ТекРаздача.ЗаполненностьМиксера = ЗаполненностьМиксера; 
	ТекРаздача.МассаРаздачи = МассаРаздачи; 

КонецПроцедуры
	
#КонецОбласти
