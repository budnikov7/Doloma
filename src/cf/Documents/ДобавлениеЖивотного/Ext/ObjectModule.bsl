Процедура ОбработкаПроведения(Отказ, Режим)
	
	Проверки(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьЖивотных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.СостояниеЖивотных.Записывать 			= Истина;
	Движения.РазмещениеЖивотных.Записывать 			= Истина;
	Движения.РодителиЖивотных.Записывать 			= Истина;
	Движения.ИнформацияОРождении.Записывать 		= Истина;
	Движения.Осеменения.Записывать 					= Истина;
	Движения.УЗИисследования.Записывать 			= Истина;
	Движения.Отелы.Записывать						= Истина;
	Движения.ДатаПредполагамогоЗапуска.Записывать 	= Истина;
	Движения.ДатаПредполагаемогоОтёла.Записывать 	= Истина;
	Движения.Взвешивания.Записывать 				= Истина;
	Движения.ПроизводственныеГруппы.Записывать		= Истина;
	
	ТаблицаЖивотных = ПолучитьТаблицуЖивотных();
	//ДАННЫЕ О ЖИВОТНЫХ
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаЖивотных Цикл  
		
		ПериодДляПроизводственнойГруппы = Дата;
		ПроизводственнаяГруппа = Перечисления.ПроизводственныеГруппы.Тёлка;
		
		НовоеДвижение 						= Движения.РазмещениеЖивотных.Добавить();
		НовоеДвижение.Период 				= Дата;
		НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Животное;
		НовоеДвижение.Корпус 				= СтрокаТабличнойЧасти.КорпусРазмещения;
		НовоеДвижение.Ферма					= ЭтотОбъект.Ферма;
		
		НовоеДвижение 				= Движения.РодителиЖивотных.Добавить();
		НовоеДвижение.Период 		= Дата;
		НовоеДвижение.Животное 		= СтрокаТабличнойЧасти.Животное;
		НовоеДвижение.Мать 			= СтрокаТабличнойЧасти.Мать;
		НовоеДвижение.Отец 			= СтрокаТабличнойЧасти.Отец;
		
		НовоеДвижение 				= Движения.ИнформацияОРождении.Добавить();
		НовоеДвижение.Вес			= СтрокаТабличнойЧасти.ВесТеленка;
		НовоеДвижение.Животное		= СтрокаТабличнойЧасти.Животное;
		НовоеДвижение.Период		= СтрокаТабличнойЧасти.ДатаРождения;
		НовоеДвижение.Пол			= СтрокаТабличнойЧасти.ПолТеленка;
		НовоеДвижение.ФермаРождения	= СтрокаТабличнойЧасти.МестоРождения;

		НовоеДвижение 				= Движения.Взвешивания.Добавить();
		НовоеДвижение.Вес			= СтрокаТабличнойЧасти.ВесТеленка;
		НовоеДвижение.Животное		= СтрокаТабличнойЧасти.Животное;
		НовоеДвижение.Период		= Дата; 
		
		СтрокиДополнительныхДанных 	= ДополнительныеДанныеЖивотных.Найти(СтрокаТабличнойЧасти.ПолеСвязи);
		
		Если СтрокиДополнительныхДанных = Неопределено Тогда
			
			Если СтрокаТабличнойЧасти.ПолТеленка = Перечисления.ПолЖивотного.Корова Тогда
				
				НовоеДвижение 						= Движения.СостояниеЖивотных.Добавить();
				НовоеДвижение.Период 				= Дата;
				НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Животное;
				НовоеДвижение.СостояниеЖивотного 	= Перечисления.СтатусЖивотного.НеСтельная;
			
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Для Счет = 1 По СтрокиДополнительныхДанных.КоличествоОсеменений Цикл
			
			НовоеДвижение 						= Движения.Осеменения.Добавить();
			НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Животное;
			НовоеДвижение.Семя 					= СтрокиДополнительныхДанных.Семя;
			НовоеДвижение.УникальныйКлючЗаписи 	= Новый УникальныйИдентификатор;		
			НовоеДвижение.Период				= СтрокиДополнительныхДанных.ДатаПоследнегоОсеменения; 
			
			//Если Счет = 1 И СтрокиДополнительныхДанных.ДатаПоследнегоОсеменения <> Дата Тогда
			//	НовоеДвижение 						= Движения.СостояниеЖивотных.Добавить();
			//	НовоеДвижение.Период 				= СтрокиДополнительныхДанных.ДатаПоследнегоОсеменения;
			//	НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Животное;
			//	НовоеДвижение.СостояниеЖивотного 	= Перечисления.СтатусЖивотного.Осеменена;
			//КонецЕсли;
		КонецЦикла;

		Если ЗначениеЗаполнено(СтрокиДополнительныхДанных.ДатаПоследнегоУЗИ) 
				И ЗначениеЗаполнено(СтрокиДополнительныхДанных.СтатусЖивотного) Тогда
				
			НовоеДвижение 			= 	Движения.УЗИисследования.Добавить();
			НовоеДвижение.Период	= СтрокиДополнительныхДанных.ДатаПоследнегоУЗИ;
			НовоеДвижение.Статус	= СтрокиДополнительныхДанных.СтатусЖивотного;
			НовоеДвижение.Мать		= СтрокаТабличнойЧасти.Животное;
			
			НовоеДвижение 						= Движения.СостояниеЖивотных.Добавить();
			НовоеДвижение.Период 				= Дата;
			НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Животное;
			НовоеДвижение.СостояниеЖивотного 	= СтрокиДополнительныхДанных.СтатусЖивотного;
		Иначе
			
			Если СтрокаТабличнойЧасти.ПолТеленка = Перечисления.ПолЖивотного.Корова Тогда
				
				НовоеДвижение 						= Движения.СостояниеЖивотных.Добавить();
				НовоеДвижение.Период 				= Дата;
				НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Животное;
				НовоеДвижение.СостояниеЖивотного 	= Перечисления.СтатусЖивотного.НеСтельная;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокиДополнительныхДанных.КоличествоОтелов) Тогда 
			Если ЗначениеЗаполнено(СтрокиДополнительныхДанных.ДатаПоследнегоОтела) Тогда 
			
				Для Счет = 1 По СтрокиДополнительныхДанных.КоличествоОтелов Цикл
					НовоеДвижение 			= Движения.Отелы.Добавить();
					НовоеДвижение.Мать 		= СтрокаТабличнойЧасти.Животное;
					НовоеДвижение.УИД		= Новый УникальныйИдентификатор;
					НовоеДвижение.Период 	= СтрокиДополнительныхДанных.ДатаПоследнегоОтела; 
					
					ПериодДляПроизводственнойГруппы = СтрокиДополнительныхДанных.ДатаПоследнегоОтела;
				КонецЦикла; 
			    ПроизводственнаяГруппа = Перечисления.ПроизводственныеГруппы.Корова;
			КонецЕсли;	
				
		КонецЕсли;	
		
		Если СтрокиДополнительныхДанных.СтатусЖивотного = Перечисления.СтатусЖивотного.Стельная Тогда
			НовоеДвижение 								= Движения.ДатаПредполагаемогоОтёла.Добавить();
			НовоеДвижение.Период 						= Дата;
			НовоеДвижение.Животное 						= СтрокаТабличнойЧасти.Животное;
			НовоеДвижение.ДатаПредполагаемогоОтёла 		= СтрокиДополнительныхДанных.ДатаПредполагаемоегоОтела;
			
			НовоеДвижение 								= Движения.ДатаПредполагамогоЗапуска.Добавить();
			НовоеДвижение.Период 						= Дата;
			НовоеДвижение.Животное 						= СтрокаТабличнойЧасти.Животное;
			НовоеДвижение.ДатаЗапуска 					= СтрокиДополнительныхДанных.ДатаЗапуска;
			НовоеДвижение.ДатаПереводаВоВторойСухостой 	= СтрокиДополнительныхДанных.ДатаПереводаВоВторойСухостой;
		КонецЕсли;  
		
		Если СтрокаТабличнойЧасти.ПолТеленка = Перечисления.ПолЖивотного.Корова И
				СтрокаТабличнойЧасти.ПериодПроизводственнойГруппы > ПериодДляПроизводственнойГруппы ИЛИ
				(СтрокаТабличнойЧасти.ПериодПроизводственнойГруппы < ПериодДляПроизводственнойГруппы И
				СтрокаТабличнойЧасти.ПроизводственнаяГруппа <> ПроизводственнаяГруппа И
				СтрокаТабличнойЧасти.ПроизводственнаяГруппа <> Перечисления.ПроизводственныеГруппы.Корова И
				СтрокаТабличнойЧасти.ПроизводственнаяГруппа <> Перечисления.ПроизводственныеГруппы.Брак) Тогда
			НовоеДвижение 									= Движения.ПроизводственныеГруппы.Добавить();
			НовоеДвижение.Период 							= ПериодДляПроизводственнойГруппы;
			НовоеДвижение.Животное 							= СтрокаТабличнойЧасти.Животное;
			НовоеДвижение.ПроизводственнаяГруппа 			= ПроизводственнаяГруппа;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЭтотОбъект.Проведен И Не РольДоступна("УдалениеЖивотных") Тогда
		
		Отказ = Истина;
		Сообщить("Документ проведен. Животные созданы. Невозможно изменить документ. Обратитесь к Администратору");
		Возврат;
		
	КонецЕсли;
		
	//ЕСЛИ РОЛЬ ВСЕ ЖЕ ДОСТУПНА, ТО НАДО ПРОВЕРИТЬ НЕ БЫЛО ЛИ ПО ЖИВОТНЫМ ДВИЖЕНИЙ
	
	СписокЖивотных = Новый Массив;
	
	Для каждого СтрокаЖивотного Из Животные Цикл
		
		Если СтрокаЖивотного.Животное = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокЖивотных.Добавить(СтрокаЖивотного.Животное);
	КонецЦикла;
	
	СсылкиНаОбъекты 	= НайтиПоСсылкам(СписокЖивотных);
	
	Если СсылкиНаОбъекты.Количество() Тогда
		
		
		Для каждого СтрокаТабличнойЧасти Из СсылкиНаОбъекты Цикл
			
			Если СтрокаТабличнойЧасти.Данные = ЭтотОбъект.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Сообщить("Животное " + СтрокаТабличнойЧасти.Ссылка + " используется в " + СтрокаТабличнойЧасти.Данные + ". Сначала удалите предыдующие документы"); 
			Отказ = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого ЖивотногоНаУдаление Из СписокЖивотных Цикл
		
		Объект = ЖивотногоНаУдаление.ПолучитьОбъект();
		Объект.Удалить();
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Животные Цикл
		
		СтрокаТабличнойЧасти.Животное = "";
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция СоздатьЖивотных(Отказ) 
	
	ДлинаКода = Ферма.ДлинаКодаЖивотного;
	БуквенныйКодСтраны 	= Строка(Ферма.БуквенныйКодСтраны); 
	
	Для каждого СтрокаТабличнойЧасти Из Животные Цикл
		
		СоздаемНовый 				= СтрокаТабличнойЧасти.Животное = Справочники.Животные.ПустаяСсылка();
		
		ОбъектТеленок 				= ?(НЕ СтрокаТабличнойЧасти.Животное = Справочники.Животные.ПустаяСсылка(),СтрокаТабличнойЧасти.Животное.ПолучитьОбъект(),Справочники.Животные.СоздатьЭлемент());									
		ОбъектТеленок.Кличка 		= СтрокаТабличнойЧасти.Кличка;
		ОбъектТеленок.Код			= ?(СоздаемНовый И Ферма.АвтонумерацияЖивотного,ПолучитьКодТеленка(СтрокаТабличнойЧасти),ОбъектТеленок.Код);
		ОбъектТеленок.Код			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерЖивотного),СтрокаТабличнойЧасти.НомерЖивотного,ОбъектТеленок.Код);
		ОбъектТеленок.Бирка 		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Бирка), СтрокаТабличнойЧасти.Бирка, БуквенныйКодСтраны + Прав(Формат(ОбъектТеленок.Код, "ЧГ=0"), ДлинаКода));
		ОбъектТеленок.БиркаХорриот	= СтрокаТабличнойЧасти.БиркаХорриот;
		ОбъектТеленок.Наименование 	= "" + ОбъектТеленок.Бирка + " " + ОбъектТеленок.Кличка;
		
		Если НЕ ЗначениеЗаполнено(ОбъектТеленок.Родословная) Тогда
			РодословнаяОбъект 	= Справочники.РодословнаяЖивотных.СоздатьЭлемент();
		Иначе	
			РодословнаяОбъект 	= ОбъектТеленок.Родословная.ПолучитьОбъект(); 
		КонецЕсли;
		РодословнаяОбъект.Наименование 	= ОбъектТеленок.Наименование; 
		РодословнаяОбъект.Кличка	 	= ОбъектТеленок.Кличка; 
		РодословнаяОбъект.БиркаХорриот 	= СтрокаТабличнойЧасти.БиркаХорриот; 
		РодословнаяОбъект.Пол 			= СтрокаТабличнойЧасти.ПолТеленка;
		Отец = СтрокаТабличнойЧасти.Отец.Родословная;
		РодословнаяОбъект.Отец          = Отец;
		РодословнаяОбъект.Мать          = СтрокаТабличнойЧасти.Мать.Родословная; 
		РодословнаяОбъект.ДатаРождения  = СтрокаТабличнойЧасти.ДатаРождения;
		РодословнаяОбъект.СтранаПроисхождения = Справочники.СтраныМира.Россия;
		Если ЗначениеЗаполнено(Отец) Тогда
			РодословнаяОбъект.Порода	= Отец.Порода;
			РодословнаяОбъект.Масть		= Отец.Масть; 
		КонецЕсли;
		
		РодословнаяОбъект.Записать(); 
		
		ОбъектТеленок.Родословная = РодословнаяОбъект.Ссылка;
		
		ОбъектТеленок.Записать();
		СтрокаТабличнойЧасти.Животное = ОбъектТеленок.Ссылка;
		
	КонецЦикла;
	
	ЭтотОбъект.Записать();
	
КонецФункции

Функция  ПолучитьКодТеленка(СтрокаТабличнойЧасти)
	
	ДлинаКодаСПрефиксом	= Ферма.ДлинаКодаЖивотного;
	ПрефиксФермы 		= Ферма.ПрефиксНомераЖивотного;
	БуквенныйКодСтраны 	= Строка(Ферма.БуквенныйКодСтраны); 
	ДлинаКода			= ДлинаКодаСПрефиксом - СтрДлина(ПрефиксФермы); 
	ДлинаПолногоНомера 	= СтрДлина(БуквенныйКодСтраны) + 2 + ДлинаКодаСПрефиксом;
	ШаблонНомера 		= БуквенныйКодСтраны + "__" + ПрефиксФермы + Прав("_________________",ДлинаКода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнформацияОРождении.Животное.Код КАК НомерЖивотного
		|ИЗ
		|	РегистрСведений.ИнформацияОРождении КАК ИнформацияОРождении
		|ГДЕ
		|	ИнформацияОРождении.Пол = &Пол
		|	И ИнформацияОРождении.Животное.Код ПОДОБНО &ШаблонНомера
		|	И НЕ ИнформацияОРождении.Животное = &ТекущееЖивотное
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформацияОРождении.Животное.Код УБЫВ";   
	
	Запрос.УстановитьПараметр("Пол", 				СтрокаТабличнойЧасти.ПолТеленка); 
	Запрос.УстановитьПараметр("ШаблонНомера", 		ШаблонНомера); 
	Запрос.УстановитьПараметр("ТекущееЖивотное", 	СтрокаТабличнойЧасти.Мать);
	
	Ответ = Запрос.Выполнить();
	
	//ПОЛУЧИМ КАКАЯ ПО СЧЕТУ ЭТО СТРОКА БЕЗ УКАЗАНИЯ НОМЕРА, ГДЕ СЧИТАЕМ САМИ
	НомерСтрокиБыки 	= 0;
	НомерСтрокиКоровы 	= 0;
	Для каждого ПроверочнаяСтрока Из Животные Цикл
		
		Если ПроверочнаяСтрока = СтрокаТабличнойЧасти Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтрокиБыки = НомерСтрокиБыки + ?(НЕ ЗначениеЗаполнено(ПроверочнаяСтрока.НомерЖивотного) И ПроверочнаяСтрока.ПолТеленка = Перечисления.ПолЖивотного.Бык,1,0);
		
		НомерСтрокиКоровы = НомерСтрокиКоровы + ?(НЕ ЗначениеЗаполнено(ПроверочнаяСтрока.НомерЖивотного) И ПроверочнаяСтрока.ПолТеленка = Перечисления.ПолЖивотного.Корова,1,0);
		
	КонецЦикла;
	
	ПрефиксНомера = БуквенныйКодСтраны + Формат(ЭтотОбъект.Дата, "ДФ=yy") + ПрефиксФермы;
	
	Если Ответ.Пустой() Тогда
		НомерЖивотного  = ПрефиксНомера + Формат((?(СтрокаТабличнойЧасти.ПолТеленка = Перечисления.ПолЖивотного.Корова, 2 + НомерСтрокиКоровы * 2, 1 + НомерСтрокиБыки * 2)), "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0");
	Иначе
		СтрокаОтвета 	= Ответ.Выгрузить().Получить(0).НомерЖивотного;
		ПоследниеЦифры 	= Число(Прав(СтрокаОтвета, ДлинаКода));
		ПоследниеЦифры 	= ПоследниеЦифры + 2;
		ПоследниеЦифры 	= ПоследниеЦифры + (2 * ?(СтрокаТабличнойЧасти.ПолТеленка = ПредопределенноеЗначение("Перечисление.ПолЖивотного.Корова"), НомерСтрокиКоровы, НомерСтрокиБыки));
		
		НомерЖивотного 	= ПрефиксНомера + Формат(ПоследниеЦифры, "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	Возврат НомерЖивотного;
	
КонецФункции

Функция Проверки(Отказ) 

	ДлинаКода = Ферма.ДлинаКодаЖивотного;
	ДлинаБуквенногоКода = СтрДлина(Строка(Ферма.БуквенныйКодСтраны));
	
	Для каждого СтрокаТабличнойЧасти ИЗ Животные Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Бирка) И  Ферма.АвтонумерацияЖивотного Тогда

			Если НЕ СтрДлина(СтрокаТабличнойЧасти.Бирка) = ДлинаБуквенногоКода + ДлинаКода Тогда
				Отказ = Истина;
				Сообщить("Бирка животного " + СтрокаТабличнойЧасти.Кличка + " не соотвествует длине, указаной в настройках фермы");
			КонецЕсли;
			
			Если НЕ СтрДлина(СтрокаТабличнойЧасти.НомерЖивотного) = ДлинаБуквенногоКода + 2 + ДлинаКода Тогда    //2 - номер года
				Отказ = Истина;
				Сообщить("Номер животного " + СтрокаТабличнойЧасти.Кличка + " не соотвествует длине, указаной в настройках фермы");
			КонецЕсли;
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Бирка) ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерЖивотного)) И НЕ Ферма.АвтонумерацияЖивотного Тогда
			Отказ = Истина;
			Сообщить("В ферме выключена автонумерация. Создание животного " + СтрокаТабличнойЧасти.Кличка + " без указания бирки или номера животного невозможно");
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция ПолучитьТаблицуЖивотных()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПроизводственныеГруппыСрезПоследних.ПроизводственнаяГруппа, ЗНАЧЕНИЕ(Перечисление.ПроизводственныеГруппы.ПустаяСсылка)) КАК ПроизводственнаяГруппа,
	               |	ЕСТЬNULL(ПроизводственныеГруппыСрезПоследних.Период, ДАТАВРЕМЯ(3000, 1, 1)) КАК ПериодПроизводственнойГруппы,
	               |	ДокументЖивотные.Кличка КАК Кличка,
	               |	ДокументЖивотные.Бирка КАК Бирка,
	               |	ДокументЖивотные.НомерЖивотного КАК НомерЖивотного,
	               |	ДокументЖивотные.Животное КАК Животное,
	               |	ДокументЖивотные.КорпусРазмещения КАК КорпусРазмещения,
	               |	ДокументЖивотные.ДатаРождения КАК ДатаРождения,
	               |	ДокументЖивотные.ВесТеленка КАК ВесТеленка,
	               |	ДокументЖивотные.Примечание КАК Примечание,
	               |	ДокументЖивотные.ПолТеленка КАК ПолТеленка,
	               |	ДокументЖивотные.Мать КАК Мать,
	               |	ДокументЖивотные.Отец КАК Отец,
	               |	ДокументЖивотные.МестоРождения КАК МестоРождения,
	               |	ДокументЖивотные.ПолеСвязи КАК ПолеСвязи
	               |ИЗ
	               |	Документ.ДобавлениеЖивотного.Животные КАК ДокументЖивотные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныеГруппы.СрезПоследних(, ) КАК ПроизводственныеГруппыСрезПоследних
	               |		ПО ДокументЖивотные.Животное = ПроизводственныеГруппыСрезПоследних.Животное
	               |ГДЕ
	               |	ДокументЖивотные.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуЖивотных()



