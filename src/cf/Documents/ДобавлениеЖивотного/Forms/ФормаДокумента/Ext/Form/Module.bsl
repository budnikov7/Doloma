&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.Автор 	= ПараметрыСеанса.ТекущийПользователь;
		Объект.Ферма 	= Объект.Автор.ОсновнаяФерма;
		Объект.Корпус 	= Объект.Автор.ОсновнойКорпус;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеПриИзменении(Элемент)
	
	ТекущиеДанные 				= Элементы.Животные.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Мать 			= ?(ЗначениеЗаполнено(ТекущиеДанные.Мать), 
									ТекущиеДанные.Мать, 
									ПредопределенноеЗначение("Справочник.Животные.НеопределеннаяМать"));
									
	ТекущиеДанные.Отец	 		= ?(ЗначениеЗаполнено(ТекущиеДанные.Отец),
									ТекущиеДанные.Отец, 
									ПредопределенноеЗначение("Справочник.БыкиПлеменные.НеопределенныйОтец"));
	ТекущиеДанные.ДатаРождения	= ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаРождения), 
									ТекущиеДанные.ДатаРождения, 
									Объект.Дата);
									
	ТекущиеДанные.КорпусРазмещения 	= ?(ЗначениеЗаполнено(ТекущиеДанные.КорпусРазмещения), 
									ТекущиеДанные.КорпусРазмещения, 
									Объект.Корпус); 

	ТекущиеДанные.МестоРождения 	= ?(ЗначениеЗаполнено(ТекущиеДанные.МестоРождения), 
									ТекущиеДанные.МестоРождения, 
									ПредопределенноеЗначение("Справочник.Фермы.НеопределеннаяФерма"));
									
	ТекущиеДанные.ПолТеленка 		= ?(ЗначениеЗаполнено(ТекущиеДанные.ПолТеленка), 
									ТекущиеДанные.ПолТеленка, 
									ПредопределенноеЗначение("Перечисление.ПолЖивотного.Корова"));
									
	ТекущиеДанные.ПолеСвязи 		= ?(ЗначениеЗаполнено(ТекущиеДанные.ПолеСвязи), 
														ТекущиеДанные.ПолеСвязи, 
														Новый УникальныйИдентификатор);
														
	ТекущиеДанные.Кличка = ?(ЗначениеЗаполнено(ТекущиеДанные.Кличка), ТекущиеДанные.Кличка, "БезКлички");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеМатьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Ферма", Объект.Ферма);
	СписокПараметров.Вставить("НеобходимоОповестить", Истина);
	
	ВзаимодействиеКлиент.ОткрытьФормуВыбораЖивотного(ЭтаФорма, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	ТекущиеДанные.Мать = ВыбранноеЗначение;
	
	ЖивотныеМатьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеМатьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", ДанныеЖивотных.ПолучитьСписокЖивотныхПоФермеДокумента(Объект.Ферма, Объект.Дата));
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить(ПараметрВыбора);
	ФиксированныеПараметры = Новый ФиксированныйМассив(СписокПараметров);
	
	Элемент.ПараметрыВыбора = ФиксированныеПараметры;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеЖивотныхПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	//НЕОБХОДИМО ПРИ ДОБАВЛЕНИИ СОПОСТАВИТЬ ДАННЫЕ
	ФормаВыбораСвязи = ПолучитьФорму("Документ.ДобавлениеЖивотного.Форма.ФормаВыбораСвязи",, ЭтотОбъект);
	
	ФормаВыбораСвязи.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СвязьЖивотногоИДопИнформации"
			И Источник = ЭтотОбъект Тогда
			
			ОсновнаяСтрока =  Объект.Животные.НайтиСтроки(Новый Структура("ПолеСвязи", Параметр)).Получить(0);
			
			ТекущиеДанныеИнформации = Объект.ДополнительныеДанныеЖивотных.Добавить();
			ТекущиеДанныеИнформации.ПолеСвязи =ОсновнаяСтрока.ПолеСвязи;
			ТекущиеДанныеИнформации.Кличка = ОсновнаяСтрока.Кличка;
			
		ИначеЕсли ИмяСобытия = "ЗаполнениеДанныхИзФайлаДобавлениеЖивотного" 
						И Источник = ОбщегоНазначения.ТекущийПользователь() Тогда
						
			ТабличнаяЧастьЖивотные 						= Объект.Животные;	
			ТабличнаяЧастьДополнительныхДанных 	= Объект.ДополнительныеДанныеЖивотных;
			
			Для каждого СтрокаТабличнойЧасти Из Параметр Цикл
				
				ПолеСвязи = Новый УникальныйИдентификатор;
				
				НоваяСтрокаЖивотного = ТабличнаяЧастьЖивотные.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЖивотного, СтрокаТабличнойЧасти);
				НоваяСтрокаЖивотного.ПолеСвязи = ПолеСвязи;
				
				Если НоваяСтрокаЖивотного.ПолТеленка = ПредопределенноеЗначение("Перечисление.ПолЖивотного.Корова") Тогда
					НоваяСтрокаДополнительныхДанных = ТабличнаяЧастьДополнительныхДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаДополнительныхДанных, СтрокаТабличнойЧасти);
					НоваяСтрокаДополнительныхДанных.ПолеСвязи = ПолеСвязи;
					
					СтруктураРеквизитов = ОбновитьПериодыОтелов(НоваяСтрокаДополнительныхДанных.ДатаПоследнегоОсеменения, НоваяСтрокаДополнительныхДанных.ДатаПоследнегоОтела, НоваяСтрокаДополнительныхДанных.СтатусЖивотного);
				
					Для каждого ЗначениеРеквизита Из СтруктураРеквизитов Цикл
						
						НоваяСтрокаДополнительныхДанных[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
					КонецЦикла;
					
				КонецЕсли;
				
				НоваяСтрокаЖивотного.Мать 			= ?(ЗначениеЗаполнено(НоваяСтрокаЖивотного.Мать), 
									НоваяСтрокаЖивотного.Мать, 
									ПредопределенноеЗначение("Справочник.Животные.НеопределеннаяМать"));
									
				НоваяСтрокаЖивотного.Отец	 		= ?(ЗначениеЗаполнено(НоваяСтрокаЖивотного.Отец),
												НоваяСтрокаЖивотного.Отец, 
												ПредопределенноеЗначение("Справочник.БыкиПлеменные.НеопределенныйОтец"));
				НоваяСтрокаЖивотного.ДатаРождения	= ?(ЗначениеЗаполнено(НоваяСтрокаЖивотного.ДатаРождения), 
												НоваяСтрокаЖивотного.ДатаРождения, 
												Объект.Дата);
												
				НоваяСтрокаЖивотного.КорпусРазмещения 	= ?(ЗначениеЗаполнено(НоваяСтрокаЖивотного.КорпусРазмещения), 
												НоваяСтрокаЖивотного.КорпусРазмещения, 
												Объект.Корпус); 

				НоваяСтрокаЖивотного.МестоРождения 	= ?(ЗначениеЗаполнено(НоваяСтрокаЖивотного.МестоРождения), 
												НоваяСтрокаЖивотного.МестоРождения, 
												ПредопределенноеЗначение("Справочник.Фермы.НеопределеннаяФерма"));
												
				НоваяСтрокаЖивотного.ПолТеленка 		= ?(ЗначениеЗаполнено(НоваяСтрокаЖивотного.ПолТеленка), 
												НоваяСтрокаЖивотного.ПолТеленка, 
												ПредопределенноеЗначение("Перечисление.ПолЖивотного.Корова"));
	
				
			КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ферма) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещение", ОбщегоНазначения);
		ПоказатьПредупреждение(ОписаниеОповещения, "Перед заполнением данных на основании файла необходимо выбрать ферму");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаЗапись", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Документ должен быть записан перед заполнением. Записать?", РежимДиалогаВопрос.ДаНет);
		Возврат;	
	КонецЕсли;
	
	ВзаимодействиеКлиент.ОткрытьФормуЗаполненияОбъектаНаОснованииФайла(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ЗавершениеВопросаЗапись(ОтветПользователя, Параметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Возврат 0;
	КонецЕсли;
	
	//ПОПРОБУЕМ ЗАПИСАТЬ
	
	Попытка 
		
		ЭтотОбъект.Записать();
		
		ВзаимодействиеКлиент.ОткрытьФормуЗаполненияОбъектаНаОснованииФайла(ЭтаФорма, Объект.Ссылка);
		
	Исключение
		
		ВызватьИсключение "Ошибка при попытке записи";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЖивотныеПередУдалением(Элемент, Отказ)
	
	//УДАЛИМ СВЯЗАННЫЕ СТРОКИ В ДОПОЛНИТЕЛЬНОЙ ИНФОРМАЦИИ
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ПолеСвязи", ТекущиеДанные.ПолеСвязи);
	
	НайденныеСтроки = Объект.ДополнительныеДанныеЖивотных.НайтиСтроки(Отбор);
	Для каждого СтрокаУдаления Из НайденныеСтроки Цикл
		Объект.ДополнительныеДанныеЖивотных.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеЖивотныхДатаПоследнегоОсемененияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеДанныеЖивотных.ТекущиеДанные;
	                                                        	
	СтруктураРеквизитов = ОбновитьПериодыОтелов(ТекущиеДанные.ДатаПоследнегоОсеменения, ТекущиеДанные.ДатаПоследнегоОтела, ТекущиеДанные.СтатусЖивотного);
	
	Если НЕ СтруктураРеквизитов.Количество() Тогда
		ТекущиеДанные.Животное = "";
	КонецЕсли;
	
	Для каждого ЗначениеРеквизита Из СтруктураРеквизитов Цикл
		
		ТекущиеДанные[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеЖивотныхСтатусЖивотногоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеДанныеЖивотных.ТекущиеДанные;
	
	СтруктураРеквизитов = ОбновитьПериодыОтелов(ТекущиеДанные.ДатаПоследнегоОсеменения, ТекущиеДанные.ДатаПоследнегоОтела, ТекущиеДанные.СтатусЖивотного);
	
	Если НЕ СтруктураРеквизитов.Количество() Тогда
		ТекущиеДанные.Животное = "";
	КонецЕсли;
	
	Для каждого ЗначениеРеквизита Из СтруктураРеквизитов Цикл
		
		ТекущиеДанные[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеДанныеЖивотныхДатаПоследнегоОтелаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДополнительныеДанныеЖивотных.ТекущиеДанные;
	
	СтруктураРеквизитов = ОбновитьПериодыОтелов(ТекущиеДанные.ДатаПоследнегоОсеменения, ТекущиеДанные.ДатаПоследнегоОтела, ТекущиеДанные.СтатусЖивотного);
	
	Если НЕ СтруктураРеквизитов.Количество() Тогда
		ТекущиеДанные.Животное = "";
	КонецЕсли;
	
	Для каждого ЗначениеРеквизита Из СтруктураРеквизитов Цикл
		
		ТекущиеДанные[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПериодыОтелов(ДатаПоследнегоОсеменения, ДатаПоследнегоОтела, СтатусЖивотного)
	
	СтруктураРеквизитов 	= Новый Соответствие;
	ПустаяДата 					= Дата('00010101');
	
	Если ДатаПоследнегоОсеменения < ДатаПоследнегоОтела Тогда
		
		СтруктураРеквизитов.Вставить("ДатаПредполагаемоегоОтела", 			ПустаяДата);
		СтруктураРеквизитов.Вставить("ДатаЗапуска", 											ПустаяДата);
		СтруктураРеквизитов.Вставить("ДатаПереводаВоВторойСухостой", 	ПустаяДата);
		
		Возврат СтруктураРеквизитов;
	КонецЕсли;
	
	Если  СтатусЖивотного = Перечисления.СтатусЖивотного.Стельная Тогда 
		
		СтруктураРеквизитов.Вставить("ДатаПредполагаемоегоОтела", 			ОбщегоНазначения.ДобавитьДни(ДатаПоследнегоОсеменения, ?(ДатаПоследнегоОтела = Дата(1, 1, 1), 
																											Объект.Ферма.ДнейСтельностиТелки - 1, 
																											Объект.Ферма.ДнейСтельностиКоровы - 1)));
		СтруктураРеквизитов.Вставить("ДатаЗапуска", 											ОбщегоНазначения.ДобавитьДни(СтруктураРеквизитов["ДатаПредполагаемоегоОтела"], -Объект.Ферма.ДнейЗапуска));
		СтруктураРеквизитов.Вставить("ДатаПереводаВоВторойСухостой", 	ОбщегоНазначения.ДобавитьДни(СтруктураРеквизитов["ДатаПредполагаемоегоОтела"], -Объект.Ферма.ДнейПереводаВСухостой));
		
	Иначе
		                                                                                                                                                                              
		СтруктураРеквизитов.Вставить("ДатаПредполагаемоегоОтела", 			ПустаяДата);
		СтруктураРеквизитов.Вставить("ДатаЗапуска", 											ПустаяДата);
		СтруктураРеквизитов.Вставить("ДатаПереводаВоВторойСухостой", 	ПустаяДата);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ФермаПриИзменении(Элемент)
	
	ПроверкаАвтонумерацииФермы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверкаАвтонумерацииФермы();
	
	ЭтаФорма.ТолькоПросмотр = ОграничениеДоступности.ОграничитьДанныеДокумента(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверкаАвтонумерацииФермы()
	
	ВключенаАвтонумерация = ОбщегоНазначения.ПолучитьСвойствоОбъекта(Объект.Ферма, "АвтонумерацияЖивотного");
	
	Элементы.Животные.ПодчиненныеЭлементы.ОсновныеДанныхГруппа.ПодчиненныеЭлементы.ЖивотныеКличка.Видимость = Не ВключенаАвтонумерация;
	Элементы.Животные.ПодчиненныеЭлементы.ДанныеКоровыГруппа.Видимость = Не ВключенаАвтонумерация;
	
КонецФункции

&НаКлиенте
Процедура ЖивотныеМатьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
   	ЗаполнитьКличкуТеленка();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьКличкуТеленка()
	
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолТеленка = ПредопределенноеЗначение("Перечисление.ПолЖивотного.ПустаяСсылка") Тогда
		
		ТекущиеДанные.Кличка = "";
	ИначеЕсли ТекущиеДанные.ПолТеленка = ПредопределенноеЗначение("Перечисление.ПолЖивотного.Корова") Тогда
		
		ТекущиеДанные.Кличка = ОбщегоНазначения.ПолучитьСвойствоОбъекта(ТекущиеДанные.Мать, "Кличка");
		
	Иначе
		
		ТекущиеДанные.Кличка = "Бык";
	КонецЕсли;
	
КонецФункции





