
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	//ПроверитьДублиЗаболеваний(Отказ);
	ПроверкаОстатков(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.ПериодыБолезнейЖивотных.Записывать 	= Истина;
	Движения.ТоварыНаСкладах.Записывать				= Истина;
	
	Для каждого СтрокаТабличнойЧасти Из ЖивотныеНаЛечении Цикл
		
		//ДОБАВИМ НОВЫЕ СТРОКИ ПО ЖИВОТНЫМ
		Если НЕ НачалоДня(СтрокаТабличнойЧасти.НачалоЛечения) = НачалоДня(Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеДвижение	 						= Движения.ПериодыБолезнейЖивотных.Добавить();
		НовоеДвижение.Период 					= НачалоДня(СтрокаТабличнойЧасти.НачалоЛечения);
		НовоеДвижение.Животное 					= СтрокаТабличнойЧасти.Животное; 
		Если ВидЗаболевания = Перечисления.ВидыЗаболеваний.Мастит Тогда
			НовоеДвижение.Заболевание 			= Справочники.Заболевания.Мастит; 
			НовоеДвижение.МаститБольнаяЧасть	= СтрокаТабличнойЧасти.МаститБольнаяЧасть;
		Иначе
			НовоеДвижение.Заболевание 			= СтрокаТабличнойЧасти.Заболевание; 
			НовоеДвижение.МаститБольнаяЧасть	= "0000";
		КонецЕсли;
		НовоеДвижение.СтатусБолезни 			= Перечисления.ПериодыЗаболеваний.НачалоЛечения;
		НовоеДвижение.СхемаЛечения				= СтрокаТабличнойЧасти.СхемаЛечения;
		НовоеДвижение.СписокПрепаратовПолеСвязи = СтрокаТабличнойЧасти.СписокПрепаратовПолеСвязи;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из ЖивотныеОжидающие Цикл
		
		//ДОБАВИМ НОВЫЕ СТРОКИ ПО ЖИВОТНЫМ
		Если НЕ НачалоДня(СтрокаТабличнойЧасти.НачалоЛечения) = НачалоДня(Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеДвижение	 						= Движения.ПериодыБолезнейЖивотных.Добавить();
		НовоеДвижение.Период 					= НачалоДня(СтрокаТабличнойЧасти.НачалоЛечения);
		НовоеДвижение.Животное 					= СтрокаТабличнойЧасти.Животное;
		НовоеДвижение.Заболевание 				= СтрокаТабличнойЧасти.Заболевание;
		НовоеДвижение.СтатусБолезни 			= Перечисления.ПериодыЗаболеваний.ОжиданиеТеста;
		НовоеДвижение.СписокПрепаратовПолеСвязи = СтрокаТабличнойЧасти.СписокПрепаратовПолеСвязи;
		
	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из ЖивотныеВСтадо Цикл
		
		//ДОБАВИМ НОВЫЕ СТРОКИ ПО ЖИВОТНЫМ
		НовоеДвижение	 						= Движения.ПериодыБолезнейЖивотных.Добавить();
		НовоеДвижение.Период 					= НачалоДня(Дата);
		НовоеДвижение.Животное 					= СтрокаТабличнойЧасти.Животное;
		НовоеДвижение.Заболевание 				= СтрокаТабличнойЧасти.Заболевание;
		НовоеДвижение.СтатусБолезни 			= Перечисления.ПериодыЗаболеваний.КонецЛечения;
		НовоеДвижение.СписокПрепаратовПолеСвязи = СтрокаТабличнойЧасти.СписокПрепаратовПолеСвязи;
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из СписокИспользованныхПрепаратов Цикл
		
		НовоеДвижение 				= Движения.ТоварыНаСкладах.ДобавитьРасход();
		НовоеДвижение.Период		= Дата;
		НовоеДвижение.Регистратор 	= Ссылка;
		НовоеДвижение.Номенклатура 	= СтрокаТабличнойЧасти.Препарат;
		НовоеДвижение.Склад 		= Склад;
		НовоеДвижение.Количество 	= Справочники.Номенклатура.РассчитатьКоличествоВОсновнойЕдиницеИзмерения(СтрокаТабличнойЧасти.Препарат, СтрокаТабличнойЧасти.ЕдиницаИзмерения, СтрокаТабличнойЧасти.Количество);
		НовоеДвижение.Сумма		 	= СредняяЦенаПрепарата(СтрокаТабличнойЧасти.Препарат) * НовоеДвижение.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЖивотныеНаЛечении.Очистить(); 
	ЖивотныеОжидающие.Очистить();
	ЖивотныеВСтадо.Очистить();
КонецПроцедуры

Функция СредняяЦенаПрепарата(Номенклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|ВЫБОР КОГДА ТоварыНаСкладахОстатки.КоличествоОстаток = 0 Тогда
		|	0
		|ИНАЧЕ
		|	ТоварыНаСкладахОстатки.СуммаОстаток / ТоварыНаСкладахОстатки.КоличествоОстаток
		|КОНЕЦ КАК СредняяЦена
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&ДатаПроверки,
		|			Номенклатура = &Номенклатура
		|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки";
	
	Запрос.УстановитьПараметр("ДатаПроверки", 	Дата);
	Запрос.УстановитьПараметр("Номенклатура",	Номенклатура);
	Запрос.УстановитьПараметр("Склад", 					Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СредняяЦена;
	
КонецФункции

Функция ВыборкаНеСоответствующихЗаболеваний()
	
	ТЧЗаболевания = ЖивотныеНаЛечении.Выгрузить(,"НомерСтроки, Заболевание");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧЗаболевания.НомерСтроки КАК НомерСтроки,
	|	ТЧЗаболевания.Заболевание КАК Заболевание
	|ПОМЕСТИТЬ втЗаболевания
	|ИЗ
	|	&ТЧЗаболевания КАК ТЧЗаболевания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаболевания.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(втЗаболевания.Заболевание) КАК Заболевание
	|ИЗ
	|	втЗаболевания КАК втЗаболевания
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидЗаболевания = ЗНАЧЕНИЕ(Перечисление.ВидыЗаболеваний.Мастит)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ втЗаболевания.Заболевание = ЗНАЧЕНИЕ(Справочник.Заболевания.Мастит)
	|		КОНЕЦ"; 
	Запрос.УстановитьПараметр("ТЧЗаболевания",ТЧЗаболевания);
	Запрос.УстановитьПараметр("ВидЗаболевания",ВидЗаболевания);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;

КонецФункции // ПроверкаНаСтельность()

Процедура ПроверкаОстатков(Отказ)      
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СписокИспользованныхПрепаратов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СписокТоваров = СписокИспользованныхПрепаратов.Выгрузить();
	Справочники.Номенклатура.РассчитатьКоличествоВОсновнойЕдиницеИзмеренияВТабличнойЧасти(СписокТоваров);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.Препарат КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК КоличествоДокумент, 
		|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ВременнаяТаблица КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.КоличествоДокумент КАК КоличествоДокумент,
		|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕстьNull(ОстаткиВТ.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Остатки.Номенклатура КАК Номенклатура,
		|			Остатки.КоличествоОстаток КАК КоличествоОстаток
		|		ИЗ
		|			РегистрНакопления.ТоварыНаСкладах.Остатки(
		|					&ДатаПроверки,
		|					Номенклатура В
		|							(ВЫБРАТЬ
		|								ТаблицаДокумента.Номенклатура
		|							ИЗ
		|								ТаблицаДокумента)
		|						И Склад = &Склад) КАК Остатки) КАК ОстаткиВТ
		|		ПО ТаблицаДокумента.Номенклатура = ОстаткиВТ.Номенклатура";
	
	Запрос.УстановитьПараметр("ДатаПроверки", 				Дата);
	Запрос.УстановитьПараметр("ВременнаяТаблица", 		СписокТоваров.Скопировать());
	Запрос.УстановитьПараметр("Склад", 								Склад);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабличнойЧасти Из РезультатЗапроса Цикл
		
		Если СтрокаТабличнойЧасти.КоличествоДокумент > СтрокаТабличнойЧасти.КоличествоОстаток Тогда
			
			Отказ = Истина;
			Сообщить("На складе - " + Склад + " не хватает остатка препарата " + СтрокаТабличнойЧасти.Номенклатура + 
			". На складе - " + Справочники.Номенклатура.РассчитатьКоличествоИзОсновнойЕдиницыИзмерения(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения, СтрокаТабличнойЧасти.КоличествоОстаток) + " " + СтрокаТабличнойЧасти.ЕдиницаИзмерения + 
			", требуется списать - " + Справочники.Номенклатура.РассчитатьКоличествоИзОсновнойЕдиницыИзмерения(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ЕдиницаИзмерения, СтрокаТабличнойЧасти.КоличествоДокумент) + " " + СтрокаТабличнойЧасти.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) 
	
	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;  
	
	Если НЕ Проведен И (ЖивотныеОжидающие.Количество() <> 0 ИЛИ ЖивотныеВСтадо.Количество() <> 0) Тогда
		ПроверитьДокументыНачалаЛечения(Отказ);
	КонецЕсли;
	
	Если ВидЗаболевания = Перечисления.ВидыЗаболеваний.Мастит Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ЖивотныеНаЛечении.Заболевание"))
	КонецЕсли;
	
	ВыборкаЗаболеваний = ВыборкаНеСоответствующихЗаболеваний();
	Пока ВыборкаЗаболеваний.Следующий() Цикл
		ТекстОшибки = "Строка " + ВыборкаЗаболеваний.НомерСтроки + ": заболевание " + ВыборкаЗаболеваний.Заболевание + " не соответствует виду заболевания документа!" + Символы.ПС;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"ЖивотныеНаЛечении["+Строка(ВыборкаЗаболеваний.НомерСтроки-1)+"].Заболевание","Объект",Отказ);
	КонецЦикла;
	
	Для каждого Строчка Из ЖивотныеНаЛечении Цикл
		Если ВидЗаболевания = Перечисления.ВидыЗаболеваний.Мастит И СтрНайти(Строчка.МаститБольнаяЧасть, "1")=0 Тогда
			ТекстОшибки = "Строка " + Строчка.НомерСтроки + ": не заполнен больной участок!" + Символы.ПС;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"ЖивотныеНаЛечении["+Строка(Строчка.НомерСтроки-1)+"].БольнойУчасток","Объект",Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  

Процедура ПроверитьДублиЗаболеваний(Отказ)

	ТЧЗаболевания = ЖивотныеНаЛечении.Выгрузить(,"НомерСтроки, Заболевание");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЖурналЛеченияЖивотныеНаЛечении.Животное КАК Животное,
	|	ЖурналЛеченияЖивотныеНаЛечении.Заболевание КАК Заболевание,
	|	ЖурналЛеченияЖивотныеНаЛечении.НачалоЛечения КАК НачалоЛечения,
	|	ЖурналЛеченияЖивотныеНаЛечении.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ втЗаболевания
	|ИЗ
	|	Документ.ЖурналЛечения.ЖивотныеНаЛечении КАК ЖурналЛеченияЖивотныеНаЛечении
	|ГДЕ
	|	ЖурналЛеченияЖивотныеНаЛечении.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыБолезнейЖивотных.Животное КАК Животное,
	|	ПериодыБолезнейЖивотных.Заболевание КАК Заболевание,
	|	МАКСИМУМ(ПериодыБолезнейЖивотных.Период) КАК Период,
	|	втЗаболевания.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ втМаксДатыБолезней
	|ИЗ
	|	втЗаболевания КАК втЗаболевания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыБолезнейЖивотных КАК ПериодыБолезнейЖивотных
	|		ПО втЗаболевания.Животное = ПериодыБолезнейЖивотных.Животное
	|			И втЗаболевания.Заболевание = ПериодыБолезнейЖивотных.Заболевание
	|			И втЗаболевания.НачалоЛечения >= ПериодыБолезнейЖивотных.Период
	|			И (ПериодыБолезнейЖивотных.Регистратор <> &Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыБолезнейЖивотных.Животное,
	|	ПериодыБолезнейЖивотных.Заболевание,
	|	втЗаболевания.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыБолезнейЖивотных.Животное КАК Животное,
	|	ПериодыБолезнейЖивотных.Заболевание КАК Заболевание,
	|	ПериодыБолезнейЖивотных.СтатусБолезни КАК СтатусБолезни,
	|	втМаксДатыБолезней.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втМаксДатыБолезней КАК втМаксДатыБолезней
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыБолезнейЖивотных КАК ПериодыБолезнейЖивотных
	|		ПО втМаксДатыБолезней.Животное = ПериодыБолезнейЖивотных.Животное
	|			И втМаксДатыБолезней.Заболевание = ПериодыБолезнейЖивотных.Заболевание
	|			И втМаксДатыБолезней.Период = ПериодыБолезнейЖивотных.Период
	|			И (ПериодыБолезнейЖивотных.Регистратор <> &Ссылка)
	|ГДЕ
	|	ПериодыБолезнейЖивотных.СтатусБолезни <> ЗНАЧЕНИЕ(Перечисление.ПериодыЗаболеваний.КонецЛечения)"; 
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		Отказ = Истина;	
		ТекстОшибки = СтрШаблон("Строка %1. У животного %2, еще не закрыто заболевание %3. Сначала закройте предыдущее лечение.",
								Выборка.НомерСтроки, Выборка.Животное, Выборка.Заболевание);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"ЖивотныеНаЛечении["+Строка(Выборка.НомерСтроки-1)+"].Заболевание","Объект",Отказ);
	КонецЦикла;

КонецПроцедуры 

Процедура ПроверитьДокументыНачалаЛечения(Отказ)  

	Если Константы.ПроверятьНаличиеДокументовНачалаЛечения.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналЛеченияЖивотныеОжидающие.НомерСтроки КАК НомерСтроки,
	|	ЖурналЛеченияЖивотныеОжидающие.Животное КАК Животное,
	|	ЖурналЛеченияЖивотныеОжидающие.СписокПрепаратовПолеСвязи КАК СписокПрепаратовПолеСвязи,
	|	""ЖивотныеОжидающие"" КАК ТЧ
	|ПОМЕСТИТЬ втТЧ
	|ИЗ
	|	Документ.ЖурналЛечения.ЖивотныеОжидающие КАК ЖурналЛеченияЖивотныеОжидающие
	|ГДЕ
	|	ЖурналЛеченияЖивотныеОжидающие.Заболевание = ЗНАЧЕНИЕ(Справочник.Заболевания.Мастит)
	|	И ЖурналЛеченияЖивотныеОжидающие.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЖурналЛеченияЖивотныеВСтадо.НомерСтроки,
	|	ЖурналЛеченияЖивотныеВСтадо.Животное,
	|	ЖурналЛеченияЖивотныеВСтадо.СписокПрепаратовПолеСвязи,
	|	""ЖивотныеВСтадо""
	|ИЗ
	|	Документ.ЖурналЛечения.ЖивотныеВСтадо КАК ЖурналЛеченияЖивотныеВСтадо
	|ГДЕ
	|	ЖурналЛеченияЖивотныеВСтадо.Заболевание = ЗНАЧЕНИЕ(Справочник.Заболевания.Мастит)
	|	И ЖурналЛеченияЖивотныеВСтадо.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТЧ.НомерСтроки КАК НомерСтроки,
	|	втТЧ.Животное КАК Животное,
	|	втТЧ.ТЧ КАК ТЧ
	|ИЗ
	|	втТЧ КАК втТЧ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыБолезнейЖивотных КАК ПериодыБолезнейЖивотных
	|		ПО втТЧ.Животное = ПериодыБолезнейЖивотных.Животное
	|			И (ПериодыБолезнейЖивотных.Регистратор <> &Документ)
	|			И (ПериодыБолезнейЖивотных.Период < &ДатаДокумента)
	|			И втТЧ.СписокПрепаратовПолеСвязи = ПериодыБолезнейЖивотных.СписокПрепаратовПолеСвязи
	|ГДЕ
	|	ПериодыБолезнейЖивотных.Животное ЕСТЬ NULL";
	Запрос.УстановитьПараметр("Документ", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		ТекстОшибки = СтрШаблон("Для животного %1 не найден документ начала лечения.", Выборка.Животное) + Символы.ПС;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,СтрШаблон("%1[%2].Животное", Выборка.ТЧ, Выборка.НомерСтроки-1),"Объект",Отказ);
	КонецЦикла;

КонецПроцедуры












