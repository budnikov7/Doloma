&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.Автор = ОбщегоНазначения.ТекущийПользователь();
		
		Объект.Ферма = Объект.Автор.ОсновнаяФерма;
		Объект.Корпус = Объект.Автор.ОсновнойКорпус;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЖивотныеПриИзменении(Неопределено);
	
	УправлениеВидимостью();
	
	ЭтаФорма.ТолькоПросмотр = ОграничениеДоступности.ОграничитьДанныеДокумента(Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Функция УправлениеВидимостью()

	Элементы.Животные.КоманднаяПанель.ПодчиненныеЭлементы.ЖивотныеВводСреднесуточногоУдоя.Пометка = Объект.ВводСреднесуточногоУдоя;
	Элементы.УдойРучной.Видимость = НЕ Объект.ВводСреднесуточногоУдоя;	
	
	Элементы.Животные.ПодчиненныеЭлементы.ЖивотныеУдойСуточный.ТолькоПросмотр = НЕ Объект.ВводСреднесуточногоУдоя;
	
КонецФункции

&НаКлиенте
Процедура ЖивотныеЖивотноеПриИзменении(Элемент)
	
	ТекущиеДанные 						= Элементы.Животные.ТекущиеДанные;
	
	ТекущиеДанные.ПрошлыйСреднесуточный	= ДанныеЖивотных.ПоследнийУдой(ТекущиеДанные.Животное, Объект.Дата);
	ТекущиеДанные.Разница 					= ТекущиеДанные.УдойСуточный - ТекущиеДанные.ПрошлыйСреднесуточный;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеУдойУтроПриИзменении(Элемент)
	
	РасчитатьСреднесуточныйУдой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеУдойОбедПриИзменении(Элемент)
	
	РасчитатьСреднесуточныйУдой();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеУдойВечерПриИзменении(Элемент)
	
	РасчитатьСреднесуточныйУдой();
	
КонецПроцедуры

&НаКлиенте
Функция РасчитатьСреднесуточныйУдой()
	
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	ТекущиеДанные.УдойСуточный 			= ТекущиеДанные.УдойУтро + ТекущиеДанные.УдойОбед + ТекущиеДанные.УдойВечер;
	ТекущиеДанные.Разница	  			= ?(ТекущиеДанные.ПрошлыйСреднесуточный = 0, 0, ТекущиеДанные.УдойСуточный - ТекущиеДанные.ПрошлыйСреднесуточный);
	
КонецФункции

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.Животные.Количество() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЖивотными", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ЗаполнитьЖивотными(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФайл(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ферма) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещение", ОбщегоНазначения);
		ПоказатьПредупреждение(ОписаниеОповещения, "Перед заполнением данных на основании файла необходимо выбрать ферму");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Корпус) Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПустоеОповещение", ОбщегоНазначения);
		ПоказатьПредупреждение(ОписаниеОповещения, "Перед заполнением данных на основании файла необходимо выбрать корпус");
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеВопросаЗапись", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Документ должен быть записан перед заполнением. Записать?", РежимДиалогаВопрос.ДаНет);
		Возврат;	
	КонецЕсли;
	
	ВзаимодействиеКлиент.ОткрытьФормуЗаполненияОбъектаНаОснованииФайла(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ЗавершениеВопросаЗапись(ОтветПользователя, Параметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
		Возврат 0;
	КонецЕсли;
	
	//ПОПРОБУЕМ ЗАПИСАТЬ
	
	Попытка 
		
		ЭтотОбъект.Записать();
		
		ВзаимодействиеКлиент.ОткрытьФормуЗаполненияОбъектаНаОснованииФайла(ЭтаФорма, Объект.Ссылка);
		
	Исключение
		
		ВызватьИсключение "Ошибка при попытке записи";
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьЖивотными(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.Животные.Очистить();
	
	ЗаполнитьЖивотнымиНаСервере();
	
КонецФункции

&НаСервере
Функция ЗаполнитьЖивотнымиНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеЖивотныхСрезПоследних.Животное КАК Животное
	|ИЗ
	|	РегистрСведений.РазмещениеЖивотных.СрезПоследних(&ДатаПроверки, ) КАК РазмещениеЖивотныхСрезПоследних
	|ГДЕ
	|	РазмещениеЖивотныхСрезПоследних.Корпус = &Корпус
	|	И РазмещениеЖивотныхСрезПоследних.Ферма = &Ферма
	|
	|УПОРЯДОЧИТЬ ПО
	|	РазмещениеЖивотныхСрезПоследних.Животное.Бирка";
	
	Запрос.УстановитьПараметр("ДатаПроверки", Объект.Дата);
	Запрос.УстановитьПараметр("Корпус", Объект.Корпус);
	Запрос.УстановитьПараметр("Ферма", Объект.Ферма);
	
	Ответ = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабличнойЧасти Из Ответ Цикл
		
		НоваяСтрока = Объект.Животные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		НоваяСтрока.ПрошлыйСреднесуточный 	= ДанныеЖивотных.ПоследнийУдой(НоваяСтрока.Животное, Объект.Дата);
		НоваяСтрока.Разница	  				= ?(НоваяСтрока.ПрошлыйСреднесуточный = 0, 0, НоваяСтрока.УдойСуточный - НоваяСтрока.ПрошлыйСреднесуточный);
				
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЖивотныеЖивотноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Ферма", Объект.Ферма);
	СписокПараметров.Вставить("НеобходимоОповестить", Истина);
	
	ВзаимодействиеКлиент.ОткрытьФормуВыбораЖивотного(ЭтаФорма, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	ТекущиеДанные.Животное = ВыбранноеЗначение;
	
	ЖивотныеЖивотноеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеЖивотноеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", ДанныеЖивотных.ПолучитьСписокЖивотныхПоФермеДокумента(Объект.Ферма, Объект.Дата));
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить(ПараметрВыбора);
	ФиксированныеПараметры = Новый ФиксированныйМассив(СписокПараметров);
	
	Элемент.ПараметрыВыбора = ФиксированныеПараметры;

КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеПриИзменении(Элемент)
	
	ПодоеноКоров 	= "Подоено голов - " + Объект.Животные.Количество();
	ОбщийУдой	= "Итого молока - " + Объект.Животные.Итог("УдойСуточный");
	СреднийУдой   	= "Средний удой - " + Формат(Объект.Животные.Итог("УдойСуточный") / Макс(Объект.Животные.Количество(), 1), "ЧДЦ=3");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеУдойСуточныйПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	ТекущиеДанные.Разница	  			= ?(ТекущиеДанные.ПрошлыйСреднесуточный = 0, 0, ТекущиеДанные.УдойСуточный - ТекущиеДанные.ПрошлыйСреднесуточный);

КонецПроцедуры

&НаКлиенте
Процедура ВводСреднесуточногоУдоя(Команда)
	
	Объект.ВводСреднесуточногоУдоя = НЕ Объект.ВводСреднесуточногоУдоя;
	
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаполнениеДанныхИзФайлаКонтрольнаяДойка" 
						И Источник = ОбщегоНазначения.ТекущийПользователь() Тогда
						
						ЗаполнитьНаОснованииФайлаНаСервере(Параметр);
						
						УправлениеВидимостью();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНаОснованииФайлаНаСервере(Параметр)
	
	Для каждого СтрокаТабличнойЧасти Из Параметр Цикл
		
		МестоНахождениеЖивотногоФерма 	= ДанныеЖивотных.МестонахождениеЖивотного(СтрокаТабличнойЧасти.Животное, Объект.Дата, Истина);
		МестоНахождениеЖивотногоКорпус 	= ДанныеЖивотных.МестонахождениеЖивотного(СтрокаТабличнойЧасти.Животное, Объект.Дата);
		
		Если НЕ МестоНахождениеЖивотногоКорпус = Объект.Корпус
			ИЛИ НЕ  МестоНахождениеЖивотногоФерма = Объект.Ферма Тогда
			
			Сообщить("Животное - " + СтрокаТабличнойЧасти.Животное + " находится в другом корпусе или ферме. Текущая ферма - " + 
			МестоНахождениеЖивотногоФерма + ", корпус - " + МестоНахождениеЖивотногоКорпус);
		КонецЕсли;
		
		НоваяСтрока = Объект.Животные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.ПрошлыйСреднесуточный 	= ДанныеЖивотных.ПоследнийУдой(НоваяСтрока.Животное, Объект.Дата);
		НоваяСтрока.УдойСуточный 			= ?(Не ЗначениеЗаполнено(НоваяСтрока.УдойСуточный), НоваяСтрока.УдойУтро + НоваяСтрока.УдойОбед + НоваяСтрока.УдойВечер, НоваяСтрока.УдойСуточный);
		НоваяСтрока.Разница	  				= ?(НоваяСтрока.ПрошлыйСреднесуточный = 0, 0, НоваяСтрока.УдойСуточный - НоваяСтрока.ПрошлыйСреднесуточный);
		
	КонецЦикла;

	Если 	Объект.Животные.Итог("УдойУтро") + 
			Объект.Животные.Итог("УдойУтро") + 
			Объект.Животные.Итог("УдойУтро") = 0 Тогда
			
			Объект.ВводСреднесуточногоУдоя = Истина;
			
	КонецЕсли;
		
КонецФункции





//Процедура Печать(Кнопка)

//	табДок = Новый ТабличныйДокумент;
//	Макет = ЭтотОбъект.ПолучитьМакет("Макет");
//	
//	оШапка  = Макет.ПолучитьОбласть("Шапка");
//	оСтрока = Макет.ПолучитьОбласть("Строка");
//	
//	оШапка.Параметры.ДатаДок  = Формат(Дата, "ДЛФ=ДД");
//	оШапка.Параметры.НомерДок = Формат(Номер, "ЧГ=0");
//	оШапка.Параметры.Корпус   = СокрЛП(Корпус.Наименование);
//	оШапка.Параметры.Ферма 	  = СокрЛП(Ферма.Наименование);
//	табДок.Вывести(оШапка);
//	
//	
//	Для Каждого тсЖ Из Животные Цикл
//		
//		оСтрока.Параметры.НомПП 		= тсЖ.НомерСтроки;
//		оСтрока.Параметры.Бирка 		= тсЖ.Животное.Бирка;
//		оСтрока.Параметры.УдойУтро 		= тсЖ.УдойУтро;
//		оСтрока.Параметры.УдойОбед 		= тсЖ.УдойОбед;
//		оСтрока.Параметры.УдойВечер 	= тсЖ.УдойВечер;
//		оСтрока.Параметры.УдойСуточный  = тсЖ.УдойСуточный;
//		табДок.Вывести(оСтрока);
//		
//	КонецЦикла;
//	
//	
//	табДок.Показать("Контрольная дойка");
//	
//КонецПроцедуры
