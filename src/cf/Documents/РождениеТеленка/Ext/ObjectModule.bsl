
Процедура ОбработкаПроведения(Отказ, Режим)
	
	ПроверкиЗаполнения(Отказ);
	
	ПроверитьМестоНахождениеЖивотных(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьТелят(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Отелы.Записывать 					= Истина;
	Движения.ОсеменятьСДаты.Записывать 			= Истина;
	Движения.СостояниеЖивотных.Записывать 		= Истина;
	Движения.КоличествоЛактаций.Записывать		= Истина;
	Движения.РазмещениеЖивотных.Записывать 		= Истина;
	Движения.РодителиЖивотных.Записывать 		= Истина;
	Движения.ИнформацияОРождении.Записывать 	= Истина;
	Движения.КонтрольныеНадои.Записывать		= Истина;
	Движения.Взвешивания.Записывать				= Истина; 
	Движения.ПроизводственныеГруппы.Записывать	= Истина; 
	Движения.ВыбраковкаЖивотных.Записывать		= Истина;
	
	ОсеменятьС = ОбщегоНазначения.ДобавитьДни(Дата, Ферма.ПериодДобровольногоОжиданияКоров);
	
	//УБЕРЕМ ДУБЛИ У ЖИВОТНЫХ (МАМА МОЖЕТ РОДИТЬ СРАЗУ ДВОЙНЮ, ТОГДА ПО МАМЕ ДУБЛИ)
	СтароеЖивотное 		= "";
	ТаблицаЖивотные 	= ПолучитьТаблицуЖивотных();
	ТаблицаЖивотные.Сортировать("Мать");
	
	Для каждого СтрокаТабличнойЧасти ИЗ ТаблицаЖивотные Цикл
		
		НовоеДвижение = Движения.Отелы.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеДвижение, СтрокаТабличнойЧасти);
		НовоеДвижение.Регистратор 	= Ссылка;
		НовоеДвижение.Период		= Дата;
		НовоеДвижение.УИД			= Новый УникальныйИдентификатор;
		
		Если СтароеЖивотное = СтрокаТабличнойЧасти.Мать Тогда
			СтароеЖивотное = СтрокаТабличнойЧасти.Мать;
			Продолжить;
		Иначе
			СтароеЖивотное = СтрокаТабличнойЧасти.Мать;
		КонецЕсли;
		
		НовоеДвижение 				= Движения.ОсеменятьСДаты.Добавить();
		НовоеДвижение.Животное 		= СтрокаТабличнойЧасти.Мать;
		НовоеДвижение.ОсеменятьС	= ОсеменятьС;
		НовоеДвижение.Период 		= Дата;
		НовоеДвижение.Регистратор 	= Ссылка;
		
		НовоеДвижение 						= Движения.КоличествоЛактаций.Добавить();
		НовоеДвижение.ВидДвижения 			= ВидДвиженияНакопления.Приход;
		НовоеДвижение.КоличествоЛактаций 	= 1;
		НовоеДвижение.Мать					= СтрокаТабличнойЧасти.Мать;
		НовоеДвижение.Период				= Дата;
		НовоеДвижение.Регистратор			= Ссылка;
		НовоеДвижение.Ферма					= Ферма;
		
		НовоеДвижение						= Движения.СостояниеЖивотных.Добавить();
		НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Мать;
		НовоеДвижение.Период 				= Дата;
		НовоеДвижение.Регистратор	 		= Ссылка;
		НовоеДвижение.СостояниеЖивотного 	= Перечисления.СтатусЖивотного.НеСтельная;
		
		//НовоеДвижение						= Движения.КонтрольныеНадои.Добавить();
		//НовоеДвижение.Период				= Дата;
		//НовоеДвижение.Животное				= СтрокаТабличнойЧасти.Мать;
		//НовоеДвижение.УдойУтро				= 0;
		//НовоеДвижение.УдойОбед				= 0;
		//НовоеДвижение.УдойВечер				= 0;
		//НовоеДвижение.ТипНадоев				= Перечисления.ТипНадоев.ПриОтеле;
		//НовоеДвижение.НомерЛактации			= ДанныеЖивотных.НомерЛактацииЖивотного(СтрокаТабличнойЧасти.Мать);  
		
		Если СтрокаТабличнойЧасти.ПроизводственнаяГруппа <> Перечисления.ПроизводственныеГруппы.Корова И
				СтрокаТабличнойЧасти.ПроизводственнаяГруппа <> Перечисления.ПроизводственныеГруппы.Брак Тогда
			НовоеДвижение 							= Движения.ПроизводственныеГруппы.Добавить();
			НовоеДвижение.Животное 					= СтрокаТабличнойЧасти.Мать;
			НовоеДвижение.Период 					= Дата;
			НовоеДвижение.ПроизводственнаяГруппа	= Перечисления.ПроизводственныеГруппы.Корова;  
		КонецЕсли;    
		
		Если НЕ ЕстьПеремещениеПоДокументу() Тогда
			НовоеДвижение 			= Движения.РазмещениеЖивотных.Добавить();
			НовоеДвижение.Период   	= Дата;
			НовоеДвижение.Животное 	= СтрокаТабличнойЧасти.Мать;
			НовоеДвижение.Корпус   	= КорпусПеремещения;
			НовоеДвижение.Ферма		= Ферма;
		КонецЕсли;
		
	КонецЦикла;
	
	//ДАННЫЕ О ЖИВОТНЫХ
	Для Каждого СтрокаТабличнойЧасти Из Животные Цикл
		
		Если СтрокаТабличнойЧасти.Мертворожденный Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.ПолТеленка = Перечисления.ПолЖивотного.Корова Тогда
			НовоеДвижение 						= Движения.СостояниеЖивотных.Добавить();
			НовоеДвижение.Период 				= Дата;
			НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Теленок;
			НовоеДвижение.СостояниеЖивотного 	= Перечисления.СтатусЖивотного.НеСтельная;  
			
			ПроизводственнаяГруппа = Перечисления.ПроизводственныеГруппы.Тёлка;	
			
			СтруктураОтбора = Новый Структура("Мать,ПолТеленка",СтрокаТабличнойЧасти.Мать,Перечисления.ПолЖивотного.Бык);
			Если Животные.НайтиСтроки(СтруктураОтбора).Количество() > 0 Тогда
				НовоеДвижение 			= Движения.ВыбраковкаЖивотных.Добавить();
				НовоеДвижение.Животное 	= СтрокаТабличнойЧасти.Теленок;
				НовоеДвижение.Период 	= Дата;
				НовоеДвижение.Брак		= Истина; 
				НовоеДвижение.ПричинаВыбраковки	= Перечисления.ПричиныВыбраковки.Фримартинизм; 
				ПроизводственнаяГруппа = Перечисления.ПроизводственныеГруппы.Брак;
			КонецЕсли;
			НовоеДвижение 							= Движения.ПроизводственныеГруппы.Добавить();
			НовоеДвижение.Животное 					= СтрокаТабличнойЧасти.Теленок;
			НовоеДвижение.Период 					= Дата;
			НовоеДвижение.ПроизводственнаяГруппа	= ПроизводственнаяГруппа;  
			
		КонецЕсли;
		
		НовоеДвижение 						= Движения.РазмещениеЖивотных.Добавить();
		НовоеДвижение.Период 				= Дата;
		НовоеДвижение.Животное 				= СтрокаТабличнойЧасти.Теленок;
		НовоеДвижение.Корпус 				= СтрокаТабличнойЧасти.КорпусРазмещения;
		НовоеДвижение.Ферма					= ЭтотОбъект.Ферма;
		
		НовоеДвижение 					= Движения.РодителиЖивотных.Добавить();
		НовоеДвижение.Период 			= Дата;
		НовоеДвижение.Животное 			= СтрокаТабличнойЧасти.Теленок;
		НовоеДвижение.Мать 				= СтрокаТабличнойЧасти.Мать;
		НовоеДвижение.Отец 				= ПолучитьОтцаТеленка(СтрокаТабличнойЧасти.Мать);
		
		НовоеДвижение 					= Движения.ИнформацияОРождении.Добавить();
		НовоеДвижение.Вес				= СтрокаТабличнойЧасти.ВесТеленка;
		НовоеДвижение.Животное			= СтрокаТабличнойЧасти.Теленок;
		НовоеДвижение.Период			= Дата;
		НовоеДвижение.Пол				= СтрокаТабличнойЧасти.ПолТеленка;
		НовоеДвижение.Регистратор		= Ссылка;
		НовоеДвижение.ФермаРождения		= Ферма;
		
		НовоеДвижение 					= Движения.Взвешивания.Добавить();
		НовоеДвижение.Вес				= СтрокаТабличнойЧасти.ВесТеленка;
		НовоеДвижение.Животное			= СтрокаТабличнойЧасти.Теленок;
		НовоеДвижение.Период			= Дата;
		НовоеДвижение.Регистратор		= Ссылка;
		
	КонецЦикла;
	
	//СоздатьДокументыНаОсновании();
	
КонецПроцедуры 

Функция ПолучитьТаблицуЖивотных()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ПроизводственныеГруппыСрезПоследних.ПроизводственнаяГруппа, ЗНАЧЕНИЕ(Перечисление.ПроизводственныеГруппы.ПустаяСсылка)) КАК ПроизводственнаяГруппа,
	               |	РождениеТеленкаЖивотные.ЛегкостьОтела КАК ЛегкостьОтела,
	               |	РождениеТеленкаЖивотные.Мать КАК Мать,
	               |	РождениеТеленкаЖивотные.Мертворожденный КАК Мертворожденный,
	               |	РождениеТеленкаЖивотные.Теленок КАК Теленок,
	               |	РождениеТеленкаЖивотные.КличкаТеленка КАК КличкаТеленка,
	               |	РождениеТеленкаЖивотные.ПолТеленка КАК ПолТеленка,
	               |	РождениеТеленкаЖивотные.ВесТеленка КАК ВесТеленка,
	               |	ПОДСТРОКА(РождениеТеленкаЖивотные.Примечание, 1, 300) КАК Примечание,
	               |	РождениеТеленкаЖивотные.ДнейСтельности КАК ДнейСтельности,
	               |	РождениеТеленкаЖивотные.ОсеменятьС КАК ОсеменятьС,
	               |	РождениеТеленкаЖивотные.КорпусРазмещения КАК КорпусРазмещения,
	               |	РождениеТеленкаЖивотные.Бирка КАК Бирка,
	               |	РождениеТеленкаЖивотные.НомерЖивотного КАК НомерЖивотного,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ЕСТЬNULL(Отелы.Период, ДАТАВРЕМЯ(1, 1, 1)) >= ЕСТЬNULL(Аборты.Период, ДАТАВРЕМЯ(1, 1, 1))
	               |				ТОГДА ЕСТЬNULL(Отелы.Период, ДАТАВРЕМЯ(1, 1, 1))
	               |			ИНАЧЕ ЕСТЬNULL(Аборты.Период, ДАТАВРЕМЯ(1, 1, 1))
	               |		КОНЕЦ) КАК ДатаПредыдущегоОтёла,
	               |	МИНИМУМ(ВЫБОР
	               |			КОГДА Отелы.Период ЕСТЬ NULL
	               |					И Аборты.Период ЕСТЬ NULL
	               |				ТОГДА 0
	               |			ИНАЧЕ РАЗНОСТЬДАТ(ВЫБОР
	               |						КОГДА ЕСТЬNULL(Отелы.Период, ДАТАВРЕМЯ(1, 1, 1)) >= ЕСТЬNULL(Аборты.Период, ДАТАВРЕМЯ(1, 1, 1))
	               |							ТОГДА ЕСТЬNULL(Отелы.Период, ДАТАВРЕМЯ(1, 1, 1))
	               |						ИНАЧЕ ЕСТЬNULL(Аборты.Период, ДАТАВРЕМЯ(1, 1, 1))
	               |					КОНЕЦ, &Дата, ДЕНЬ)
	               |		КОНЕЦ) КАК МежотёльныйПериод,
	               |	РождениеТеленкаЖивотные.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	Документ.РождениеТеленка.Животные КАК РождениеТеленкаЖивотные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроизводственныеГруппы.СрезПоследних(&Дата, Регистратор <> &Ссылка) КАК ПроизводственныеГруппыСрезПоследних
	               |		ПО РождениеТеленкаЖивотные.Мать = ПроизводственныеГруппыСрезПоследних.Животное
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Отелы КАК Отелы
	               |		ПО РождениеТеленкаЖивотные.Мать = Отелы.Мать
	               |			И (&Дата > Отелы.Период)
	               |			И РождениеТеленкаЖивотные.Ссылка <> Отелы.Регистратор
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Аборты КАК Аборты
	               |		ПО РождениеТеленкаЖивотные.Мать = Аборты.Мать
	               |			И РождениеТеленкаЖивотные.Ссылка <> Аборты.Регистратор
	               |			И (&Дата > Аборты.Период)
	               |			И (Аборты.ОткрытьЛактацию = ИСТИНА)
	               |ГДЕ
	               |	РождениеТеленкаЖивотные.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РождениеТеленкаЖивотные.Мать,
	               |	РождениеТеленкаЖивотные.Мертворожденный,
	               |	РождениеТеленкаЖивотные.НомерЖивотного,
	               |	ЕСТЬNULL(ПроизводственныеГруппыСрезПоследних.ПроизводственнаяГруппа, ЗНАЧЕНИЕ(Перечисление.ПроизводственныеГруппы.ПустаяСсылка)),
	               |	РождениеТеленкаЖивотные.Бирка,
	               |	РождениеТеленкаЖивотные.Теленок,
	               |	РождениеТеленкаЖивотные.ОсеменятьС,
	               |	РождениеТеленкаЖивотные.ПолТеленка,
	               |	РождениеТеленкаЖивотные.КличкаТеленка,
	               |	РождениеТеленкаЖивотные.КорпусРазмещения,
	               |	РождениеТеленкаЖивотные.ЛегкостьОтела,
	               |	РождениеТеленкаЖивотные.ВесТеленка,
	               |	РождениеТеленкаЖивотные.ДнейСтельности,
	               |	ПОДСТРОКА(РождениеТеленкаЖивотные.Примечание, 1, 300),
	               |	РождениеТеленкаЖивотные.НомерСтроки";
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуЖивотных()

Функция ПолучитьОтцаТеленка(МамаЖивотенка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(МАКСИМУМ(ОсемененияСрезПоследних.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ОсемененияСрезПоследних.Семя.Бык КАК СемяБык
	|ИЗ
	|	РегистрСведений.Осеменения.СрезПоследних(&Дата, Животное = &Животное) КАК ОсемененияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсемененияСрезПоследних.Семя.Бык
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Запрос.УстановитьПараметр("Дата", Дата);		
	Запрос.УстановитьПараметр("Животное", МамаЖивотенка);		
	
	Ответ = Запрос.Выполнить();
	
	Если Ответ.Пустой() Тогда
		Возврат Справочники.БыкиПлеменные.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ответ.Выгрузить().Получить(0).СемяБык;
	
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	Если ЭтотОбъект.Проведен И Не РольДоступна("УдалениеЖивотных") Тогда
		
		Отказ = Истина;
		Сообщить("Документ проведен. Телята созданы. Невозможно изменить документ. Обратитесь к Администратору");
		Возврат;
		
	КонецЕсли;
	
	//ЕСЛИ РОЛЬ ВСЕ ЖЕ ДОСТУПНА, ТО НАДО ПРОВЕРИТЬ НЕ БЫЛО ЛИ ПО ЖИВОТНЫМ ДВИЖЕНИЙ
	
	СписокЖивотных = Новый Массив;
	
	Для каждого СтрокаТабличнойЧасти Из Животные Цикл
		
		Если СтрокаТабличнойЧасти.Мертворожденный Тогда
			Продолжить;
		КонецЕсли;
		
		СписокЖивотных.Добавить(СтрокаТабличнойЧасти.Теленок);
		
	КонецЦикла;
	
	СсылкиНаОбъекты 	= НайтиПоСсылкам(СписокЖивотных);
	
	Если СсылкиНаОбъекты.Количество() Тогда
		
		
		Для каждого СтрокаТабличнойЧасти Из СсылкиНаОбъекты Цикл
			
			Если СтрокаТабличнойЧасти.Данные = ЭтотОбъект.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Сообщить("Животное " + СтрокаТабличнойЧасти.Ссылка + " используется в " + СтрокаТабличнойЧасти.Данные + ". Сначала удалите предыдующие документы"); 
			Отказ = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого ЖивотногоНаУдаление Из СписокЖивотных Цикл
		
		Объект = ЖивотногоНаУдаление.ПолучитьОбъект();
		Объект.Удалить();
		
	КонецЦикла;
	
	Для каждого СтрокаТабличнойЧасти Из Животные Цикл
		
		СтрокаТабличнойЧасти.Теленок = "";
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция СоздатьТелят(Отказ)
	
	ДлинаКода = Ферма.ДлинаКодаЖивотного;
	БуквенныйКодСтраны 	= Строка(Ферма.БуквенныйКодСтраны); 
	
	Для каждого СтрокаТабличнойЧасти Из Животные Цикл
		
		Если СтрокаТабличнойЧасти.Мертворожденный Тогда
			Если НЕ СтрокаТабличнойЧасти.Теленок = Справочники.Животные.ПустаяСсылка() Тогда
				ОбработкаУдаленияПроведения(Отказ);		
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		СоздаемНовый = СтрокаТабличнойЧасти.Теленок = Справочники.Животные.ПустаяСсылка();
		
		ОбъектТеленок 				= ?(НЕ СоздаемНовый,СтрокаТабличнойЧасти.Теленок.ПолучитьОбъект(),Справочники.Животные.СоздатьЭлемент());									
		ОбъектТеленок.Кличка 		= СтрокаТабличнойЧасти.КличкаТеленка;
		ОбъектТеленок.Код			= ?(СоздаемНовый И Ферма.АвтонумерацияЖивотного,ПолучитьКодТеленка(СтрокаТабличнойЧасти),ОбъектТеленок.Код);
		ОбъектТеленок.Код			= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерЖивотного),СтрокаТабличнойЧасти.НомерЖивотного,ОбъектТеленок.Код);																
		ОбъектТеленок.Бирка 		= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Бирка), СтрокаТабличнойЧасти.Бирка, БуквенныйКодСтраны + Прав(Формат(ОбъектТеленок.Код, "ЧГ=0"), ДлинаКода));  
		ОбъектТеленок.БиркаХорриот 	= СтрокаТабличнойЧасти.БиркаХорриот;
		ОбъектТеленок.Наименование 	= "" + ОбъектТеленок.Бирка + " " + ОбъектТеленок.Кличка;
		
		Если НЕ ЗначениеЗаполнено(ОбъектТеленок.Родословная) Тогда
			РодословнаяОбъект 	= Справочники.РодословнаяЖивотных.СоздатьЭлемент();
		Иначе	
			РодословнаяОбъект 	= ОбъектТеленок.Родословная.ПолучитьОбъект(); 
		КонецЕсли;
		РодословнаяОбъект.Наименование 			= ОбъектТеленок.Наименование; 
		РодословнаяОбъект.Кличка 				= ОбъектТеленок.Кличка; 
		РодословнаяОбъект.БиркаХорриот			= ОбъектТеленок.БиркаХорриот; 
		РодословнаяОбъект.Пол 					= СтрокаТабличнойЧасти.ПолТеленка;
		РодословнаяОбъект.Мать          		= СтрокаТабличнойЧасти.Мать.Родословная;
		РодословнаяОбъект.ДатаРождения  		= Дата;
		РодословнаяОбъект.СтранаПроисхождения 	= Справочники.СтраныМира.Россия;
		Отец = ПолучитьОтцаТеленка(СтрокаТабличнойЧасти.Мать);
		Если ЗначениеЗаполнено(Отец) Тогда  
			РодословнаяОбъект.Отец   	= Отец.Родословная;
			РодословнаяОбъект.Порода	= Отец.Родословная.Порода;
			РодословнаяОбъект.Масть		= Отец.Родословная.Масть; 
		КонецЕсли;
		РодословнаяОбъект.Записать(); 
		
		ОбъектТеленок.Родословная = РодословнаяОбъект.Ссылка;
		
		ОбъектТеленок.Записать();
		СтрокаТабличнойЧасти.Теленок = ОбъектТеленок.Ссылка;
		
	КонецЦикла;
	
	ЭтотОбъект.Записать();
	
КонецФункции

Функция ПолучитьКодТеленка(СтрокаТабличнойЧасти)
	
	ДлинаКодаСПрефиксом	= Ферма.ДлинаКодаЖивотного;
	ПрефиксФермы 		= Ферма.ПрефиксНомераЖивотного;
	БуквенныйКодСтраны 	= Строка(Ферма.БуквенныйКодСтраны); 
	ДлинаКода			= ДлинаКодаСПрефиксом - СтрДлина(ПрефиксФермы); 
	ДлинаПолногоНомера 	= СтрДлина(БуквенныйКодСтраны) + 2 + ДлинаКодаСПрефиксом;
	ШаблонНомера 		= БуквенныйКодСтраны + "__" + ПрефиксФермы + Прав("_________________",ДлинаКода);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнформацияОРождении.Животное.Код КАК НомерЖивотного
		|ИЗ
		|	РегистрСведений.ИнформацияОРождении КАК ИнформацияОРождении
		|ГДЕ
		|	ИнформацияОРождении.Пол = &Пол
		|	И ИнформацияОРождении.Животное.Код ПОДОБНО &ШаблонНомера
		|	И НЕ ИнформацияОРождении.Животное = &ТекущееЖивотное
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформацияОРождении.Животное.Код УБЫВ";   
	
	Запрос.УстановитьПараметр("Пол", 				СтрокаТабличнойЧасти.ПолТеленка); 
	Запрос.УстановитьПараметр("ШаблонНомера", 		ШаблонНомера); 
	Запрос.УстановитьПараметр("ТекущееЖивотное", 	СтрокаТабличнойЧасти.Мать);
	
	Ответ = Запрос.Выполнить();
	
	//ПОЛУЧИМ КАКАЯ ПО СЧЕТУ ЭТО СТРОКА БЕЗ УКАЗАНИЯ НОМЕРА, ГДЕ СЧИТАЕМ САМИ
	НомерСтрокиБыки 	= 0;
	НомерСтрокиКоровы 	= 0;
	Для каждого ПроверочнаяСтрока Из Животные Цикл
		
		Если ПроверочнаяСтрока = СтрокаТабличнойЧасти Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтрокиБыки = НомерСтрокиБыки + ?(НЕ ЗначениеЗаполнено(ПроверочнаяСтрока.НомерЖивотного) 
											  И ПроверочнаяСтрока.ПолТеленка = Перечисления.ПолЖивотного.Бык
											  И НЕ ПроверочнаяСтрока.Мертворожденный
											  ,1,0);
		
		НомерСтрокиКоровы = НомерСтрокиКоровы + ?(НЕ ЗначениеЗаполнено(ПроверочнаяСтрока.НомерЖивотного) 
												  И ПроверочнаяСтрока.ПолТеленка = Перечисления.ПолЖивотного.Корова
											  	  И НЕ ПроверочнаяСтрока.Мертворожденный
												  ,1,0);
		
	КонецЦикла;
	
	ПрефиксНомера = БуквенныйКодСтраны + Формат(ЭтотОбъект.Дата, "ДФ=yy") + ПрефиксФермы;
	
	Если Ответ.Пустой() Тогда
		НомерЖивотного  = ПрефиксНомера + Формат((?(СтрокаТабличнойЧасти.ПолТеленка = Перечисления.ПолЖивотного.Корова, 2 + НомерСтрокиКоровы * 2, 1 + НомерСтрокиБыки * 2)), "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0");
	Иначе
		СтрокаОтвета 	= Ответ.Выгрузить().Получить(0).НомерЖивотного;
		ПоследниеЦифры 	= Число(Прав(СтрокаОтвета, ДлинаКода));
		ПоследниеЦифры 	= ПоследниеЦифры + 2;
		ПоследниеЦифры 	= ПоследниеЦифры + (2 * ?(СтрокаТабличнойЧасти.ПолТеленка = ПредопределенноеЗначение("Перечисление.ПолЖивотного.Корова"), НомерСтрокиКоровы, НомерСтрокиБыки));
		
		НомерЖивотного 	= ПрефиксНомера + Формат(ПоследниеЦифры, "ЧЦ=" + ДлинаКода + "; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	Возврат НомерЖивотного;
	
КонецФункции

Функция ПроверитьМестоНахождениеЖивотных(Отказ)
	
	Для каждого СтрокаТабличнойЧасти из Животные Цикл
		
		Если НЕ ДанныеЖивотных.МестонахождениеЖивотного(СтрокаТабличнойЧасти.Мать, Дата,,Ссылка) = Ферма.КорпусДляОтела Тогда
			
			Отказ = Истина;
			Сообщить("Животное " + СтрокаТабличнойЧасти.Мать + " не находится в корпусе для отелов. Переместите животное");
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПроверкиЗаполнения(Отказ)
	
	ДлинаКода = Ферма.ДлинаКодаЖивотного;
	ДлинаБуквенногоКода = СтрДлина(Строка(Ферма.БуквенныйКодСтраны));
	
	Для каждого СтрокаТабличнойЧасти Из Животные Цикл
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Бирка) И Ферма.АвтонумерацияЖивотного Тогда

			Если НЕ СтрДлина(СтрокаТабличнойЧасти.Бирка) = ДлинаБуквенногоКода + ДлинаКода Тогда
				Отказ = Истина;
				Сообщить("Бирка животного " + СтрокаТабличнойЧасти.КличкаТеленка + " не соотвествует длине, указаной в настройках фермы");
			КонецЕсли; 
			
			ДлинаБирки = СтрДлина(СокрЛП(СтрокаТабличнойЧасти.БиркаХорриот));
			Если ДлинаБирки < 11 Тогда
				ТекстОшибки = СтрШаблон("Строка %1: длина бирки Хорриот должна быть 11 символов. Текущая длина - %2.", СтрокаТабличнойЧасти.НомерСтроки, ДлинаБирки) + Символы.ПС;
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,"Животные["+Строка(СтрокаТабличнойЧасти.НомерСтроки-1)+"].БиркаХорриот","Объект",Отказ);
			КонецЕсли;
			
			Если НЕ СтрДлина(СтрокаТабличнойЧасти.НомерЖивотного) = ДлинаБуквенногоКода + 2 + ДлинаКода Тогда    //2 - номер года
				Отказ = Истина;
				Сообщить("Номер животного " + СтрокаТабличнойЧасти.КличкаТеленка + " не соответствует длине, указаной в настройках фермы");
			КонецЕсли;
		КонецЕсли;
		
		Если (Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Бирка) ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерЖивотного)) И НЕ Ферма.АвтонумерацияЖивотного Тогда
			Отказ = Истина;
			Сообщить("В ферме выключена автонумерация. Создание животного " + СтрокаТабличнойЧасти.КличкаТеленка + " без указания бирки или номера животного невозможно");
		КонецЕсли;  
		
		Если СтрокаТабличнойЧасти.Мертворожденный = Ложь И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВесТеленка) Тогда
			Отказ = Истина;
			Сообщить("Для животного " + СтрокаТабличнойЧасти.КличкаТеленка + " не указан вес");
		КонецЕсли;  
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДокументыНаОсновании()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеЖивотных.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеЖивотных КАК ПеремещениеЖивотных
		|ГДЕ
		|	ПеремещениеЖивотных.ДокументОснование = &ДокументОснования
		|	И ПеремещениеЖивотных.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументОснования", Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() Тогда
		Возврат;
	КонецЕсли;

	ДокументПеремещения 					= Документы.ПеремещениеЖивотных.СоздатьДокумент();
	ДокументПеремещения.Заполнить(Ссылка);
	ДокументПеремещения.Дата 				= Дата;
	ДокументПеремещения.ФермаОтправитель 	= Ферма;
	ДокументПеремещения.КорпусОтправитель 	= Ферма.КорпусДляОтела;
	ДокументПеремещения.КорпусПолучатель 	= КорпусПеремещения;
	ДокументПеремещения.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Функция ЕстьПеремещениеПоДокументу()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПеремещениеЖивотных.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПеремещениеЖивотных КАК ПеремещениеЖивотных
		|ГДЕ
		|	ПеремещениеЖивотных.ДокументОснование = &ДокументОснования
		|	И ПеремещениеЖивотных.ПометкаУдаления = ЛОЖЬ
		|	И ПеремещениеЖивотных.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ДокументОснования", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции




