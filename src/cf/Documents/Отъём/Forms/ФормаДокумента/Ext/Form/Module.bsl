&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Объект.Автор 	= ПараметрыСеанса.ТекущийПользователь;
		
		Объект.Ферма 	= Объект.Автор.ОсновнаяФерма;
		Объект.Корпус 	= Объект.Ферма.КорпусДляНоворожденныхТелок;  
	Иначе
		РасчетИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеЖивотноеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	ЗаполнитьДанныеЖивотного(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеВесПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	ПосчитатьВесЖивотного(ТекущиеДанные);
	
	РасчетИтогов();
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьДанныеЖивотного(СтрокаТабличнойЧасти = Неопределено) 
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Животные Цикл
			
			СтрокаТабличнойЧасти.ТекущийВозраст = ОбщегоНазначения.РазностьДат(ДанныеЖивотных.ДатаРожденияЖивотного(СтрокаТабличнойЧасти.Животное), Объект.Дата,, Истина);
			СтрокаТабличнойЧасти.ВесРождения	= ДанныеЖивотных.ПараметрыПриРождении(СтрокаТабличнойЧасти.Животное).Вес;
			СтрокаТабличнойЧасти.ДатаРождения	= ДанныеЖивотных.ДатаРожденияЖивотного(СтрокаТабличнойЧасти.Животное);
			
			ПосчитатьВесЖивотного(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	Иначе
		
		СтрокаТабличнойЧасти.ТекущийВозраст = ОбщегоНазначения.РазностьДат(ДанныеЖивотных.ДатаРожденияЖивотного(СтрокаТабличнойЧасти.Животное), Объект.Дата,, Истина);
		СтрокаТабличнойЧасти.ВесРождения	= ДанныеЖивотных.ПараметрыПриРождении(СтрокаТабличнойЧасти.Животное).Вес;
		СтрокаТабличнойЧасти.ДатаРождения	= ДанныеЖивотных.ДатаРожденияЖивотного(СтрокаТабличнойЧасти.Животное);
		
		ПосчитатьВесЖивотного(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	РасчетИтогов();
	
КонецФункции

&НаСервере
Функция РасчетИтогов()
	
	Если НЕ Объект.Животные.Количество() Тогда
		Возврат 0;
	КонецЕсли;
	
	ТаблицаСворачивания = Объект.Животные.Выгрузить(, "Вес, Привес, ТекущийВозраст, ВесТриМесяца");
	ТаблицаСворачивания.Свернуть(, "Вес, Привес, ТекущийВозраст, ВесТриМесяца");
	
	СвернутаяСтрока = ТаблицаСворачивания.Получить(0);
	
	СреднийВес 			= СвернутаяСтрока.Вес / Объект.Животные.Количество();
	СреднийПривес 		= СвернутаяСтрока.Привес / Объект.Животные.Количество();
	СреднийВозвраст 		= СвернутаяСтрока.ТекущийВозраст / Объект.Животные.Количество();
	СреднийВесПриОтъеме 	= СвернутаяСтрока.ВесТриМесяца / Объект.Животные.Количество();
	
КонецФункции

&НаКлиенте
Функция ПосчитатьВесЖивотного(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Привес 		= (СтрокаТабличнойЧасти.Вес - СтрокаТабличнойЧасти.ВесРождения) / (СтрокаТабличнойЧасти.ТекущийВозраст+1);
	СтрокаТабличнойЧасти.ВесТриМесяца 	= (СтрокаТабличнойЧасти.Привес * ОбщегоНазначения.ПолучитьСвойствоОбъекта(Объект.Ферма, "ОтъемДней")) + СтрокаТабличнойЧасти.ВесРождения;
	
КонецФункции

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ферма) 
					ИЛИ Не ЗначениеЗаполнено(Объект.Корпус) Тогда
		ПоказатьПредупреждение(, "Перед заполнением необходимо выбрать размещение животных");
		Возврат;	
	КонецЕсли;
	
	//ЗАПОЛНИМ ТАБЛИЧНУЮ ЧАСТЬ ТЕЛЯТАМИ
	Если Объект.Животные.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьТелят", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ЗаполнитьТелят(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьТелят(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.Животные.Очистить();
	
	//ГЛЯНЕМ ТЕХ, У КОГО НЕ БЫЛО ОТЪЕМА
	ЗаполнитьТелятНаСервере();
	ЗаполнитьДанныеЖивотного();
		
КонецФункции

&НаСервере
Функция ЗаполнитьТелятНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Взвешивания.Животное КАК Животное
		|ПОМЕСТИТЬ втВзвешивания
		|ИЗ
		|	РегистрСведений.Взвешивания КАК Взвешивания
		|ГДЕ
		|	Взвешивания.Регистратор ССЫЛКА Документ.Отъём
		|	И Взвешивания.Период > ДОБАВИТЬКДАТЕ(&ТекущаяДата, ГОД, -1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнформацияОРожденииСрезПоследних.Животное КАК Животное,
		|	РазмещениеЖивотныхСрезПоследних.Ферма КАК Ферма,
		|	РазмещениеЖивотныхСрезПоследних.Корпус КАК Корпус
		|ИЗ
		|	РегистрСведений.ИнформацияОРождении.СрезПоследних(, Пол = ЗНАЧЕНИЕ(Перечисление.ПолЖивотного.Корова)) КАК ИнформацияОРожденииСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЖивотных.СрезПоследних(, ) КАК РазмещениеЖивотныхСрезПоследних
		|		ПО ИнформацияОРожденииСрезПоследних.Животное = РазмещениеЖивотныхСрезПоследних.Животное
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВзвешивания КАК втВзвешивания
		|		ПО ИнформацияОРожденииСрезПоследних.Животное = втВзвешивания.Животное
		|ГДЕ
		|	РАЗНОСТЬДАТ(ИнформацияОРожденииСрезПоследних.Период, &ТекущаяДата, ДЕНЬ) < &КоличествоДнейОтъемаМаксимум
		|	И РАЗНОСТЬДАТ(ИнформацияОРожденииСрезПоследних.Период, &ТекущаяДата, ДЕНЬ) > &КоличествоДнейОтъемаМинимум
		|	И РазмещениеЖивотныхСрезПоследних.Ферма = &Ферма
		|	И РазмещениеЖивотныхСрезПоследних.Корпус = &Корпус
		|	И втВзвешивания.Животное ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИнформацияОРожденииСрезПоследних.Животное.Бирка";
	
	Запрос.УстановитьПараметр("КоличествоДнейОтъемаМаксимум", 	Объект.Ферма.ОтъемДней + 60);
	Запрос.УстановитьПараметр("КоличествоДнейОтъемаМинимум", 	Объект.Ферма.ОтъемДней - 7);
	Запрос.УстановитьПараметр("ТекущаяДата", 					Объект.Дата);
	Запрос.УстановитьПараметр("ТекущийДокумент", 				Объект.Ссылка);
	Запрос.УстановитьПараметр("Ферма", 							Объект.Ферма);
	Запрос.УстановитьПараметр("Корпус", 						Объект.Корпус);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТабличнойЧасти Из РезультатЗапроса Цикл
		
		НоваяСтрока = Объект.Животные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ЖивотныеЖивотноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Ферма", Объект.Ферма);
	СписокПараметров.Вставить("НеобходимоОповестить", Истина);
	
	ВзаимодействиеКлиент.ОткрытьФормуВыбораЖивотного(ЭтаФорма, СписокПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ТекущиеДанные = Элементы.Животные.ТекущиеДанные;
	
	ТекущиеДанные.Животное = ВыбранноеЗначение;
	
	ЖивотныеЖивотноеПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖивотныеЖивотноеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Ссылка", ДанныеЖивотных.ПолучитьСписокЖивотныхПоФермеДокумента(Объект.Ферма, Объект.Дата));
	СписокПараметров = Новый Массив;
	СписокПараметров.Добавить(ПараметрВыбора);
	ФиксированныеПараметры = Новый ФиксированныйМассив(СписокПараметров);
	
	Элемент.ПараметрыВыбора = ФиксированныеПараметры;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.ТолькоПросмотр = ОграничениеДоступности.ОграничитьДанныеДокумента(Объект.Дата);
	
КонецПроцедуры



//МОЖЕМ БУДЕТ НУЖНА
//Процедура Печать(Кнопка)
//	
//	//* Список печ.форм ...
//	Если спПечатныхФорм.Количество() > 1 Тогда
//		
//		выбПечатнаяФорма = ВыбратьИзСписка(спПечатныхФорм, ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнПечать, 0);
//		
//		Если текПечатнаяФорма = Неопределено Тогда
//			Возврат;
//		Иначе
//			текПечатнаяФорма = выбПечатнаяФорма;
//		КонецЕсли;
//		
//	КонецЕсли;
//		
//	
//	
//	
//	//* Печать
//	Если ЗначениеЗаполнено(текПечатнаяФорма) Тогда // печатаем...
//		
//		табДок = Новый ТабличныйДокумент;
//		Макет = ЭтотОбъект.ПолучитьМакет(СокрЛП(текПечатнаяФорма));
//		
//		
//		оШапка  = Макет.ПолучитьОбласть("Шапка");
//		оСтрока = Макет.ПолучитьОбласть("Строка");
//		
//		оШапка.Параметры.НомерАкта = СокрЛП(Номер);
//		оШапка.Параметры.ДатаАкта  = Формат(Дата, "ДЛФ=ДД");
//		оШапка.Параметры.Корпус    = СокрЛП(Корпус);
//		оШапка.Параметры.Ферма 	   = СокрЛП(Ферма);
//		ТабДок.Вывести(оШапка);
//		
//		Для Каждого тсЖ Из Животные Цикл
//			
//			оСтрока.Параметры.НомПП 		 = тсЖ.НомерСтроки;
//			оСтрока.Параметры.Бирка 		 = СокрЛП(тсЖ.Животное.Бирка);
//			оСтрока.Параметры.Животное 		 = СокрЛП(тсЖ.Животное);
//			оСтрока.Параметры.ДатаРождения 	 = тсЖ.Животное.ДатаРождения;
//			оСтрока.Параметры.ВесПриРождении = ДанныеЖивотных.ПараметрыПриРождении(тсЖ.Животное).Пол;
//			оСтрока.Параметры.ВозрастОтъёма	 = Окр(Число(Дата-тсЖ.Животное.ДатаРождения)/86400,1);
//			оСтрока.Параметры.Рост           = ?(тсЖ.Рост=0,"",тсЖ.Рост);
//			оСтрока.Параметры.Вес            = ?(тсЖ.Вес=0, "",тсЖ.Вес);
//			табДок.Вывести(оСтрока);
//			
//		КонецЦикла;
//		
//		табДок.АвтоМасштаб = Истина;
//		табДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
//		табДок.ПолеСверху = 1;
//		табДок.ПолеСлева  = 1;
//		табДок.ПолеСнизу  = 1;
//		табДок.ПолеСправа = 1;
//		
//		
//		табДок.Показать(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнПечать.Текст);
//		
//	КонецЕсли;
//	
//КонецПроцедуры



